
Fob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003228  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080032e8  080032e8  000042e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003360  08003360  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003360  08003360  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003360  08003360  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00004360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003368  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000014  0800337c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800337c  00005130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be62  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e33  00000000  00000000  00010e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00012cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000716  00000000  00000000  00013610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013af2  00000000  00000000  00013d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e25b  00000000  00000000  00027818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000764b6  00000000  00000000  00035a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abf29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  000abf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000aded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032d0 	.word	0x080032d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080032d0 	.word	0x080032d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__spi_write>:
#define RANDOM_MULTIPLIER       109
#define RSSI_VALID_DELAY_US     1300

//static UINT8 rnd_seed = 0;

HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	1dbb      	adds	r3, r7, #6
 800022c:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 800022e:	23a0      	movs	r3, #160	@ 0xa0
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	2200      	movs	r2, #0
 8000234:	2110      	movs	r1, #16
 8000236:	0018      	movs	r0, r3
 8000238:	f000 ff61 	bl	80010fe <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	23a0      	movs	r3, #160	@ 0xa0
 8000240:	05db      	lsls	r3, r3, #23
 8000242:	2140      	movs	r1, #64	@ 0x40
 8000244:	0018      	movs	r0, r3
 8000246:	f000 ff3d 	bl	80010c4 <HAL_GPIO_ReadPin>
 800024a:	1e03      	subs	r3, r0, #0
 800024c:	d1f7      	bne.n	800023e <__spi_write+0x1e>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 800024e:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <__spi_write+0x88>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	2517      	movs	r5, #23
 8000254:	197c      	adds	r4, r7, r5
 8000256:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <__spi_write+0x8c>)
 8000258:	68f9      	ldr	r1, [r7, #12]
 800025a:	2201      	movs	r2, #1
 800025c:	f001 fc84 	bl	8001b68 <HAL_SPI_Transmit>
 8000260:	0003      	movs	r3, r0
 8000262:	7023      	strb	r3, [r4, #0]
	if(status==HAL_OK && pData!=NULL)
 8000264:	002a      	movs	r2, r5
 8000266:	18bb      	adds	r3, r7, r2
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d10e      	bne.n	800028c <__spi_write+0x6c>
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d00b      	beq.n	800028c <__spi_write+0x6c>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <__spi_write+0x88>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	18bc      	adds	r4, r7, r2
 800027a:	4d0c      	ldr	r5, [pc, #48]	@ (80002ac <__spi_write+0x8c>)
 800027c:	1dbb      	adds	r3, r7, #6
 800027e:	881a      	ldrh	r2, [r3, #0]
 8000280:	68b9      	ldr	r1, [r7, #8]
 8000282:	002b      	movs	r3, r5
 8000284:	f001 fc70 	bl	8001b68 <HAL_SPI_Transmit>
 8000288:	0003      	movs	r3, r0
 800028a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 800028c:	23a0      	movs	r3, #160	@ 0xa0
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2201      	movs	r2, #1
 8000292:	2110      	movs	r1, #16
 8000294:	0018      	movs	r0, r3
 8000296:	f000 ff32 	bl	80010fe <HAL_GPIO_WritePin>
	return status;
 800029a:	2317      	movs	r3, #23
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	781b      	ldrb	r3, [r3, #0]

}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b006      	add	sp, #24
 80002a6:	bdb0      	pop	{r4, r5, r7, pc}
 80002a8:	20000030 	.word	0x20000030
 80002ac:	0000ffff 	.word	0x0000ffff

080002b0 <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	b087      	sub	sp, #28
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	1dbb      	adds	r3, r7, #6
 80002bc:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 80002be:	23a0      	movs	r3, #160	@ 0xa0
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	2200      	movs	r2, #0
 80002c4:	2110      	movs	r1, #16
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 ff19 	bl	80010fe <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 80002cc:	46c0      	nop			@ (mov r8, r8)
 80002ce:	23a0      	movs	r3, #160	@ 0xa0
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	2140      	movs	r1, #64	@ 0x40
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fef5 	bl	80010c4 <HAL_GPIO_ReadPin>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d1f7      	bne.n	80002ce <__spi_read+0x1e>
	//HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 80002de:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <__spi_read+0x78>)
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	2617      	movs	r6, #23
 80002e4:	19bc      	adds	r4, r7, r6
 80002e6:	4b11      	ldr	r3, [pc, #68]	@ (800032c <__spi_read+0x7c>)
 80002e8:	68f9      	ldr	r1, [r7, #12]
 80002ea:	2201      	movs	r2, #1
 80002ec:	f001 fc3c 	bl	8001b68 <HAL_SPI_Transmit>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <__spi_read+0x78>)
 80002f6:	6818      	ldr	r0, [r3, #0]
 80002f8:	19bc      	adds	r4, r7, r6
 80002fa:	4d0c      	ldr	r5, [pc, #48]	@ (800032c <__spi_read+0x7c>)
 80002fc:	1dbb      	adds	r3, r7, #6
 80002fe:	881a      	ldrh	r2, [r3, #0]
 8000300:	68b9      	ldr	r1, [r7, #8]
 8000302:	002b      	movs	r3, r5
 8000304:	f001 fdb4 	bl	8001e70 <HAL_SPI_Receive>
 8000308:	0003      	movs	r3, r0
 800030a:	7023      	strb	r3, [r4, #0]

//	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 800030c:	23a0      	movs	r3, #160	@ 0xa0
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	2201      	movs	r2, #1
 8000312:	2110      	movs	r1, #16
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fef2 	bl	80010fe <HAL_GPIO_WritePin>

	return status;
 800031a:	19bb      	adds	r3, r7, r6
 800031c:	781b      	ldrb	r3, [r3, #0]

}
 800031e:	0018      	movs	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	b007      	add	sp, #28
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	20000030 	.word	0x20000030
 800032c:	0000ffff 	.word	0x0000ffff

08000330 <TI_write_reg>:

void TI_write_reg(UINT8 addr, UINT8 value)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	0002      	movs	r2, r0
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	1dbb      	adds	r3, r7, #6
 800033e:	1c0a      	adds	r2, r1, #0
 8000340:	701a      	strb	r2, [r3, #0]
	__spi_write(&addr, &value, 1);
 8000342:	1db9      	adds	r1, r7, #6
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	2201      	movs	r2, #1
 8000348:	0018      	movs	r0, r3
 800034a:	f7ff ff69 	bl	8000220 <__spi_write>
}
 800034e:	46c0      	nop			@ (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b002      	add	sp, #8
 8000354:	bd80      	pop	{r7, pc}

08000356 <TI_write_burst_reg>:

void TI_write_burst_reg(BYTE addr, BYTE* buffer, BYTE count)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b082      	sub	sp, #8
 800035a:	af00      	add	r7, sp, #0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	0011      	movs	r1, r2
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	1c02      	adds	r2, r0, #0
 8000364:	701a      	strb	r2, [r3, #0]
 8000366:	1dbb      	adds	r3, r7, #6
 8000368:	1c0a      	adds	r2, r1, #0
 800036a:	701a      	strb	r2, [r3, #0]
	addr = (addr | WRITE_BURST);
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2240      	movs	r2, #64	@ 0x40
 8000372:	4313      	orrs	r3, r2
 8000374:	b2da      	uxtb	r2, r3
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	701a      	strb	r2, [r3, #0]
	__spi_write(&addr, buffer, count);
 800037a:	1dbb      	adds	r3, r7, #6
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b29a      	uxth	r2, r3
 8000380:	6839      	ldr	r1, [r7, #0]
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	0018      	movs	r0, r3
 8000386:	f7ff ff4b 	bl	8000220 <__spi_write>
}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}

08000392 <TI_strobe>:

void TI_strobe(BYTE strobe)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	0002      	movs	r2, r0
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	701a      	strb	r2, [r3, #0]
	__spi_write(&strobe, 0, 0);
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	0018      	movs	r0, r3
 80003a6:	f7ff ff3b 	bl	8000220 <__spi_write>
}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b002      	add	sp, #8
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <TI_read_status>:
	__spi_read(&addr, &data, 1);
	return data;
}

uint8_t TI_read_status(BYTE addr)
{
 80003b2:	b590      	push	{r4, r7, lr}
 80003b4:	b085      	sub	sp, #20
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	0002      	movs	r2, r0
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	addr= (addr | READ_BURST);
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2240      	movs	r2, #64	@ 0x40
 80003c4:	4252      	negs	r2, r2
 80003c6:	4313      	orrs	r3, r2
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	701a      	strb	r2, [r3, #0]
	__spi_read(&addr, &data, 1);
 80003ce:	240f      	movs	r4, #15
 80003d0:	1939      	adds	r1, r7, r4
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	2201      	movs	r2, #1
 80003d6:	0018      	movs	r0, r3
 80003d8:	f7ff ff6a 	bl	80002b0 <__spi_read>
	return data;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	781b      	ldrb	r3, [r3, #0]
}
 80003e0:	0018      	movs	r0, r3
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b005      	add	sp, #20
 80003e6:	bd90      	pop	{r4, r7, pc}

080003e8 <TI_write_settings>:
//it is also high
BYTE paTable[] = {0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0};


void TI_write_settings()
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	//
	// Rf settings for CC1101
	//

	//i checked in smartRF studio 7 of Mr. ilynx's code // the setting is yours
	TI_write_reg(CCxxx0_IOCFG2,0x29);  //GDO2 Output Pin Configuration
 80003ec:	2129      	movs	r1, #41	@ 0x29
 80003ee:	2000      	movs	r0, #0
 80003f0:	f7ff ff9e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_IOCFG1,0x2E);  //GDO1 Output Pin Configuration
 80003f4:	212e      	movs	r1, #46	@ 0x2e
 80003f6:	2001      	movs	r0, #1
 80003f8:	f7ff ff9a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_IOCFG0,0x06);  //GDO0 Output Pin Configuration
 80003fc:	2106      	movs	r1, #6
 80003fe:	2002      	movs	r0, #2
 8000400:	f7ff ff96 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FIFOTHR,0x47); //RX FIFO and TX FIFO Thresholds
 8000404:	2147      	movs	r1, #71	@ 0x47
 8000406:	2003      	movs	r0, #3
 8000408:	f7ff ff92 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_SYNC1,0xD3);   //Sync Word, High Byte
 800040c:	21d3      	movs	r1, #211	@ 0xd3
 800040e:	2004      	movs	r0, #4
 8000410:	f7ff ff8e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_SYNC0,0x91);   //Sync Word, Low Byte
 8000414:	2191      	movs	r1, #145	@ 0x91
 8000416:	2005      	movs	r0, #5
 8000418:	f7ff ff8a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_PKTLEN,0xFF);  //Packet Length
 800041c:	21ff      	movs	r1, #255	@ 0xff
 800041e:	2006      	movs	r0, #6
 8000420:	f7ff ff86 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_PKTCTRL1,0x04);//Packet Automation Control
 8000424:	2104      	movs	r1, #4
 8000426:	2007      	movs	r0, #7
 8000428:	f7ff ff82 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_PKTCTRL0,0x05);//Packet Automation Control
 800042c:	2105      	movs	r1, #5
 800042e:	2008      	movs	r0, #8
 8000430:	f7ff ff7e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_ADDR,0x00);    //Device Address
 8000434:	2100      	movs	r1, #0
 8000436:	2009      	movs	r0, #9
 8000438:	f7ff ff7a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_CHANNR,0x00);  //Channel Number
 800043c:	2100      	movs	r1, #0
 800043e:	200a      	movs	r0, #10
 8000440:	f7ff ff76 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCTRL1,0x08); //Frequency Synthesizer Control
 8000444:	2108      	movs	r1, #8
 8000446:	200b      	movs	r0, #11
 8000448:	f7ff ff72 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCTRL0,0x00); //Frequency Synthesizer Control
 800044c:	2100      	movs	r1, #0
 800044e:	200c      	movs	r0, #12
 8000450:	f7ff ff6e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ2,0x10);   //Frequency Control Word, High Byte
 8000454:	2110      	movs	r1, #16
 8000456:	200d      	movs	r0, #13
 8000458:	f7ff ff6a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ1,0xB4);   //Frequency Control Word, Middle Byte
 800045c:	21b4      	movs	r1, #180	@ 0xb4
 800045e:	200e      	movs	r0, #14
 8000460:	f7ff ff66 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ0,0x2E);   //Frequency Control Word, Low Byte
 8000464:	212e      	movs	r1, #46	@ 0x2e
 8000466:	200f      	movs	r0, #15
 8000468:	f7ff ff62 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG4,0xCA); //Modem Configuration
 800046c:	21ca      	movs	r1, #202	@ 0xca
 800046e:	2010      	movs	r0, #16
 8000470:	f7ff ff5e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG3,0x83); //Modem Configuration
 8000474:	2183      	movs	r1, #131	@ 0x83
 8000476:	2011      	movs	r0, #17
 8000478:	f7ff ff5a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG2,0x93); //Modem Configuration
 800047c:	2193      	movs	r1, #147	@ 0x93
 800047e:	2012      	movs	r0, #18
 8000480:	f7ff ff56 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG1,0x22); //Modem Configuration
 8000484:	2122      	movs	r1, #34	@ 0x22
 8000486:	2013      	movs	r0, #19
 8000488:	f7ff ff52 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG0,0xF8); //Modem Configuration
 800048c:	21f8      	movs	r1, #248	@ 0xf8
 800048e:	2014      	movs	r0, #20
 8000490:	f7ff ff4e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_DEVIATN,0x34); //Modem Deviation Setting
 8000494:	2134      	movs	r1, #52	@ 0x34
 8000496:	2015      	movs	r0, #21
 8000498:	f7ff ff4a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM2,0x07);   //Main Radio Control State Machine Configuration
 800049c:	2107      	movs	r1, #7
 800049e:	2016      	movs	r0, #22
 80004a0:	f7ff ff46 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM1,0x30);   //Main Radio Control State Machine Configuration
 80004a4:	2130      	movs	r1, #48	@ 0x30
 80004a6:	2017      	movs	r0, #23
 80004a8:	f7ff ff42 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM0,0x18);   //Main Radio Control State Machine Configuration
 80004ac:	2118      	movs	r1, #24
 80004ae:	2018      	movs	r0, #24
 80004b0:	f7ff ff3e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FOCCFG,0x16);  //Frequency Offset Compensation Configuration
 80004b4:	2116      	movs	r1, #22
 80004b6:	2019      	movs	r0, #25
 80004b8:	f7ff ff3a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_BSCFG,0x6C);   //Bit Synchronization Configuration
 80004bc:	216c      	movs	r1, #108	@ 0x6c
 80004be:	201a      	movs	r0, #26
 80004c0:	f7ff ff36 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL2,0x43);//AGC Control
 80004c4:	2143      	movs	r1, #67	@ 0x43
 80004c6:	201b      	movs	r0, #27
 80004c8:	f7ff ff32 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL1,0x40);//AGC Control
 80004cc:	2140      	movs	r1, #64	@ 0x40
 80004ce:	201c      	movs	r0, #28
 80004d0:	f7ff ff2e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL0,0x91);//AGC Control
 80004d4:	2191      	movs	r1, #145	@ 0x91
 80004d6:	201d      	movs	r0, #29
 80004d8:	f7ff ff2a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_WOREVT1,0x87); //High Byte Event0 Timeout
 80004dc:	2187      	movs	r1, #135	@ 0x87
 80004de:	201e      	movs	r0, #30
 80004e0:	f7ff ff26 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_WOREVT0,0x6B); //Low Byte Event0 Timeout
 80004e4:	216b      	movs	r1, #107	@ 0x6b
 80004e6:	201f      	movs	r0, #31
 80004e8:	f7ff ff22 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_WORCTRL,0xF8); //Wake On Radio Control
 80004ec:	21f8      	movs	r1, #248	@ 0xf8
 80004ee:	2020      	movs	r0, #32
 80004f0:	f7ff ff1e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FREND1,0x56);  //Front End RX Configuration
 80004f4:	2156      	movs	r1, #86	@ 0x56
 80004f6:	2021      	movs	r0, #33	@ 0x21
 80004f8:	f7ff ff1a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FREND0,0x10);  //Front End TX Configuration
 80004fc:	2110      	movs	r1, #16
 80004fe:	2022      	movs	r0, #34	@ 0x22
 8000500:	f7ff ff16 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL3,0xE9);  //Frequency Synthesizer Calibration
 8000504:	21e9      	movs	r1, #233	@ 0xe9
 8000506:	2023      	movs	r0, #35	@ 0x23
 8000508:	f7ff ff12 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL2,0x2A);  //Frequency Synthesizer Calibration
 800050c:	212a      	movs	r1, #42	@ 0x2a
 800050e:	2024      	movs	r0, #36	@ 0x24
 8000510:	f7ff ff0e 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL1,0x00);  //Frequency Synthesizer Calibration
 8000514:	2100      	movs	r1, #0
 8000516:	2025      	movs	r0, #37	@ 0x25
 8000518:	f7ff ff0a 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL0,0x1F);  //Frequency Synthesizer Calibration
 800051c:	211f      	movs	r1, #31
 800051e:	2026      	movs	r0, #38	@ 0x26
 8000520:	f7ff ff06 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_RCCTRL1,0x41); //RC Oscillator Configuration
 8000524:	2141      	movs	r1, #65	@ 0x41
 8000526:	2027      	movs	r0, #39	@ 0x27
 8000528:	f7ff ff02 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_RCCTRL0,0x00); //RC Oscillator Configuration
 800052c:	2100      	movs	r1, #0
 800052e:	2028      	movs	r0, #40	@ 0x28
 8000530:	f7ff fefe 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_FSTEST,0x59);  //Frequency Synthesizer Calibration Control
 8000534:	2159      	movs	r1, #89	@ 0x59
 8000536:	2029      	movs	r0, #41	@ 0x29
 8000538:	f7ff fefa 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_PTEST,0x7F);   //Production Test
 800053c:	217f      	movs	r1, #127	@ 0x7f
 800053e:	202a      	movs	r0, #42	@ 0x2a
 8000540:	f7ff fef6 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCTEST,0x3F); //AGC Test
 8000544:	213f      	movs	r1, #63	@ 0x3f
 8000546:	202b      	movs	r0, #43	@ 0x2b
 8000548:	f7ff fef2 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_TEST2,0x81);   //Various Test Settings
 800054c:	2181      	movs	r1, #129	@ 0x81
 800054e:	202c      	movs	r0, #44	@ 0x2c
 8000550:	f7ff feee 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_TEST1,0x35);   //Various Test Settings
 8000554:	2135      	movs	r1, #53	@ 0x35
 8000556:	202d      	movs	r0, #45	@ 0x2d
 8000558:	f7ff feea 	bl	8000330 <TI_write_reg>
	TI_write_reg(CCxxx0_TEST0,0x09);   //Various Test Settings
 800055c:	2109      	movs	r1, #9
 800055e:	202e      	movs	r0, #46	@ 0x2e
 8000560:	f7ff fee6 	bl	8000330 <TI_write_reg>
    TI_write_reg(CCxxx0_IOCFG0,   settings->IOCFG0);
    TI_write_reg(CCxxx0_PKTCTRL1, settings->PKTCTRL1);
    TI_write_reg(CCxxx0_PKTCTRL0, settings->PKTCTRL0);
    TI_write_reg(CCxxx0_ADDR,     settings->ADDR);
    TI_write_reg(CCxxx0_PKTLEN,   settings->PKTLEN);*/
}
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <Power_up_reset>:

void Power_up_reset()
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
	//Güç geldikten sonra CC1101 i Macro resetlemek için

	HAL_Init();
 800056e:	f000 faea 	bl	8000b46 <HAL_Init>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000572:	23a0      	movs	r3, #160	@ 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2201      	movs	r2, #1
 8000578:	2110      	movs	r1, #16
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fdbf 	bl	80010fe <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f000 fb5d 	bl	8000c40 <HAL_Delay>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000586:	23a0      	movs	r3, #160	@ 0xa0
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fdb5 	bl	80010fe <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	@ 0x64
 8000596:	f000 fb53 	bl	8000c40 <HAL_Delay>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800059a:	23a0      	movs	r3, #160	@ 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2201      	movs	r2, #1
 80005a0:	2110      	movs	r1, #16
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fdab 	bl	80010fe <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005a8:	2064      	movs	r0, #100	@ 0x64
 80005aa:	f000 fb49 	bl	8000c40 <HAL_Delay>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005ae:	23a0      	movs	r3, #160	@ 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fda1 	bl	80010fe <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	23a0      	movs	r3, #160	@ 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2140      	movs	r1, #64	@ 0x40
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fd7d 	bl	80010c4 <HAL_GPIO_ReadPin>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d1f7      	bne.n	80005be <Power_up_reset+0x54>
	TI_strobe(CCxxx0_SRES);
 80005ce:	2030      	movs	r0, #48	@ 0x30
 80005d0:	f7ff fedf 	bl	8000392 <TI_strobe>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005d4:	23a0      	movs	r3, #160	@ 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fd8e 	bl	80010fe <HAL_GPIO_WritePin>
}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <TI_init>:


void TI_init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	1dbb      	adds	r3, r7, #6
 80005f4:	801a      	strh	r2, [r3, #0]
	//UINT8 i;
	//UINT16 delay;
	uint8_t status;
	hal_spi = hspi;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <TI_init+0x78>)
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	601a      	str	r2, [r3, #0]


	for(int i=0; i<10; i++){
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e009      	b.n	8000616 <TI_init+0x2e>
	status = TI_read_status(CCxxx0_VERSION);
 8000602:	2313      	movs	r3, #19
 8000604:	18fc      	adds	r4, r7, r3
 8000606:	2031      	movs	r0, #49	@ 0x31
 8000608:	f7ff fed3 	bl	80003b2 <TI_read_status>
 800060c:	0003      	movs	r3, r0
 800060e:	7023      	strb	r3, [r4, #0]
	for(int i=0; i<10; i++){
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b09      	cmp	r3, #9
 800061a:	ddf2      	ble.n	8000602 <TI_init+0x1a>
		  if(status!=0x14)
		  {
		  }
	}
	TI_strobe(CCxxx0_SFRX); //î÷èùàåì RX FIFO
 800061c:	203a      	movs	r0, #58	@ 0x3a
 800061e:	f7ff feb8 	bl	8000392 <TI_strobe>
	TI_strobe(CCxxx0_SFTX); //î÷èùàåì TX FIFO
 8000622:	203b      	movs	r0, #59	@ 0x3b
 8000624:	f7ff feb5 	bl	8000392 <TI_strobe>
	TI_write_settings();
 8000628:	f7ff fede 	bl	80003e8 <TI_write_settings>
	TI_write_burst_reg(CCxxx0_PATABLE, paTable, 8);//is it true
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <TI_init+0x7c>)
 800062e:	2208      	movs	r2, #8
 8000630:	0019      	movs	r1, r3
 8000632:	203e      	movs	r0, #62	@ 0x3e
 8000634:	f7ff fe8f 	bl	8000356 <TI_write_burst_reg>

	TI_write_reg(CCxxx0_FIFOTHR, 0x07);
 8000638:	2107      	movs	r1, #7
 800063a:	2003      	movs	r0, #3
 800063c:	f7ff fe78 	bl	8000330 <TI_write_reg>

	TI_strobe(CCxxx0_SIDLE); //ïåðåâîäèì ìîäåì â IDLE
 8000640:	2036      	movs	r0, #54	@ 0x36
 8000642:	f7ff fea6 	bl	8000392 <TI_strobe>
	TI_strobe(CCxxx0_SFRX); //î÷èùàåì RX FIFO
 8000646:	203a      	movs	r0, #58	@ 0x3a
 8000648:	f7ff fea3 	bl	8000392 <TI_strobe>
	TI_strobe(CCxxx0_SFTX); //î÷èùàåì TX FIFO
 800064c:	203b      	movs	r0, #59	@ 0x3b
 800064e:	f7ff fea0 	bl	8000392 <TI_strobe>
	  rnd_seed = (rnd_seed << 1) | (TI_read_status(CCxxx0_RSSI) & 0x01);
	}

	rnd_seed |= 0x0080;*/

	TI_strobe(CCxxx0_SIDLE);
 8000652:	2036      	movs	r0, #54	@ 0x36
 8000654:	f7ff fe9d 	bl	8000392 <TI_strobe>
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b007      	add	sp, #28
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	20000030 	.word	0x20000030
 8000664:	20000000 	.word	0x20000000

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	@ 0x24
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	240c      	movs	r4, #12
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fdfd 	bl	8003278 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <MX_GPIO_Init+0xc4>)
 8000680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000682:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <MX_GPIO_Init+0xc4>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
 800068a:	4b28      	ldr	r3, [pc, #160]	@ (800072c <MX_GPIO_Init+0xc4>)
 800068c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <MX_GPIO_Init+0xc4>)
 8000698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800069a:	4b24      	ldr	r3, [pc, #144]	@ (800072c <MX_GPIO_Init+0xc4>)
 800069c:	2102      	movs	r1, #2
 800069e:	430a      	orrs	r2, r1
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_GPIO_Init+0xc4>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a6:	2202      	movs	r2, #2
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80006ae:	23a0      	movs	r3, #160	@ 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2200      	movs	r2, #0
 80006b4:	2110      	movs	r1, #16
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fd21 	bl	80010fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2210      	movs	r2, #16
 80006c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80006d4:	193a      	adds	r2, r7, r4
 80006d6:	23a0      	movs	r3, #160	@ 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fb87 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GDO2_Pin;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2280      	movs	r2, #128	@ 0x80
 80006e6:	0152      	lsls	r2, r2, #5
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a10      	ldr	r2, [pc, #64]	@ (8000730 <MX_GPIO_Init+0xc8>)
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GDO2_GPIO_Port, &GPIO_InitStruct);
 80006f6:	193a      	adds	r2, r7, r4
 80006f8:	23a0      	movs	r3, #160	@ 0xa0
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 fb76 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2240      	movs	r2, #64	@ 0x40
 8000708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 8000716:	193b      	adds	r3, r7, r4
 8000718:	4a06      	ldr	r2, [pc, #24]	@ (8000734 <MX_GPIO_Init+0xcc>)
 800071a:	0019      	movs	r1, r3
 800071c:	0010      	movs	r0, r2
 800071e:	f000 fb67 	bl	8000df0 <HAL_GPIO_Init>

}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b009      	add	sp, #36	@ 0x24
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	40021000 	.word	0x40021000
 8000730:	10110000 	.word	0x10110000
 8000734:	50000400 	.word	0x50000400

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fa02 	bl	8000b46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f825 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f7ff ff8f 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074a:	f000 f953 	bl	80009f4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800074e:	f000 f869 	bl	8000824 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Power_up_reset();
 8000752:	f7ff ff0a 	bl	800056a <Power_up_reset>
  TI_init(&hspi1, CS_GPIO_Port, CS_Pin);
 8000756:	23a0      	movs	r3, #160	@ 0xa0
 8000758:	05d9      	lsls	r1, r3, #23
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <main+0x50>)
 800075c:	2210      	movs	r2, #16
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff42 	bl	80005e8 <TI_init>
//
//	  status = TI_read_status(CCxxx0_FREQEST);
//	  HAL_UART_Transmit(&huart2, &status, sizeof(status), 50); // Send to NUCLEO
//	  HAL_Delay(10);

	  status = TI_read_status(CCxxx0_VERSION);
 8000764:	2031      	movs	r0, #49	@ 0x31
 8000766:	f7ff fe24 	bl	80003b2 <TI_read_status>
 800076a:	0003      	movs	r3, r0
 800076c:	001a      	movs	r2, r3
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, &status, sizeof(status), 50); // Send to NUCLEO
 8000772:	1df9      	adds	r1, r7, #7
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <main+0x54>)
 8000776:	2332      	movs	r3, #50	@ 0x32
 8000778:	2201      	movs	r2, #1
 800077a:	f002 f927 	bl	80029cc <HAL_UART_Transmit>
	  HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f000 fa5e 	bl	8000c40 <HAL_Delay>
	  status = TI_read_status(CCxxx0_VERSION);
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	e7ed      	b.n	8000764 <main+0x2c>
 8000788:	20000034 	.word	0x20000034
 800078c:	20000098 	.word	0x20000098

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b08d      	sub	sp, #52	@ 0x34
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	2414      	movs	r4, #20
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	231c      	movs	r3, #28
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f002 fd69 	bl	8003278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a6:	003b      	movs	r3, r7
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f002 fd62 	bl	8003278 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2202      	movs	r2, #2
 80007b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2280      	movs	r2, #128	@ 0x80
 80007c6:	0152      	lsls	r2, r2, #5
 80007c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2240      	movs	r2, #64	@ 0x40
 80007ce:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fcb0 	bl	8001138 <HAL_RCC_OscConfig>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007dc:	f000 f81c 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	003b      	movs	r3, r7
 80007e2:	2207      	movs	r2, #7
 80007e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	003b      	movs	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007f2:	003b      	movs	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f8:	003b      	movs	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007fe:	003b      	movs	r3, r7
 8000800:	2100      	movs	r1, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fe7c 	bl	8001500 <HAL_RCC_ClockConfig>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800080c:	f000 f804 	bl	8000818 <Error_Handler>
  }
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b00d      	add	sp, #52	@ 0x34
 8000816:	bd90      	pop	{r4, r7, pc}

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_SPI1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_SPI1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000830:	2282      	movs	r2, #130	@ 0x82
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI1_Init+0x74>)
 800083e:	22e0      	movs	r2, #224	@ 0xe0
 8000840:	00d2      	lsls	r2, r2, #3
 8000842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000872:	2207      	movs	r2, #7
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0x74>)
 800087e:	2208      	movs	r2, #8
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000884:	0018      	movs	r0, r3
 8000886:	f001 f8b7 	bl	80019f8 <HAL_SPI_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f7ff ffc3 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000034 	.word	0x20000034
 800089c:	40013000 	.word	0x40013000

080008a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b091      	sub	sp, #68	@ 0x44
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	232c      	movs	r3, #44	@ 0x2c
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f002 fce0 	bl	8003278 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	2410      	movs	r4, #16
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	231c      	movs	r3, #28
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f002 fcd8 	bl	8003278 <memset>
  if(spiHandle->Instance==SPI1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <HAL_SPI_MspInit+0xb8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d13e      	bne.n	8000950 <HAL_SPI_MspInit+0xb0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2204      	movs	r2, #4
 80008d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 ff9d 	bl	8001820 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80008ea:	f7ff ff95 	bl	8000818 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ee:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <HAL_SPI_MspInit+0xbc>)
 80008f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <HAL_SPI_MspInit+0xbc>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	0149      	lsls	r1, r1, #5
 80008f8:	430a      	orrs	r2, r1
 80008fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <HAL_SPI_MspInit+0xbc>)
 80008fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	015b      	lsls	r3, r3, #5
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <HAL_SPI_MspInit+0xbc>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <HAL_SPI_MspInit+0xbc>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <HAL_SPI_MspInit+0xbc>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|MISO_Pin;
 8000922:	212c      	movs	r1, #44	@ 0x2c
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2246      	movs	r2, #70	@ 0x46
 8000928:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2202      	movs	r2, #2
 800092e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	187a      	adds	r2, r7, r1
 8000944:	23a0      	movs	r3, #160	@ 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fa50 	bl	8000df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b011      	add	sp, #68	@ 0x44
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	40013000 	.word	0x40013000
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_MspInit+0x44>)
 8000968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_MspInit+0x44>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	641a      	str	r2, [r3, #64]	@ 0x40
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_MspInit+0x44>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x44>)
 8000980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_MspInit+0x44>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	0549      	lsls	r1, r1, #21
 8000988:	430a      	orrs	r2, r1
 800098a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <HAL_MspInit+0x44>)
 800098e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	055b      	lsls	r3, r3, #21
 8000994:	4013      	ands	r3, r2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f91a 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <SystemInit+0x14>)
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	0512      	lsls	r2, r2, #20
 80009e6:	609a      	str	r2, [r3, #8]
#endif
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 80009fa:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <MX_USART2_UART_Init+0x64>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a00:	22e1      	movs	r2, #225	@ 0xe1
 8000a02:	0252      	lsls	r2, r2, #9
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <MX_USART2_UART_Init+0x60>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 ff6e 	bl	8002920 <HAL_UART_Init>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a48:	f7ff fee6 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	20000098 	.word	0x20000098
 8000a58:	40004400 	.word	0x40004400

08000a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	@ 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	2414      	movs	r4, #20
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f002 fc02 	bl	8003278 <memset>
  if(uartHandle->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <HAL_UART_MspInit+0x90>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d131      	bne.n	8000ae2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_UART_MspInit+0x94>)
 8000a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a82:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <HAL_UART_MspInit+0x94>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0x94>)
 8000a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	029b      	lsls	r3, r3, #10
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0x94>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_UART_MspInit+0x94>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_UART_MspInit+0x94>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA8     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2284      	movs	r2, #132	@ 0x84
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	0021      	movs	r1, r4
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2202      	movs	r2, #2
 8000ac0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	187a      	adds	r2, r7, r1
 8000ad6:	23a0      	movs	r3, #160	@ 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 f987 	bl	8000df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b00b      	add	sp, #44	@ 0x2c
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40021000 	.word	0x40021000

08000af4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af4:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000af6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af8:	f7ff ff70 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000afc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b08:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopForever+0x12>)
  b LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1a:	3204      	adds	r2, #4

08000b1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <LoopForever+0x16>)
  cmp r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b22:	f002 fbb1 	bl	8003288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b26:	f7ff fe07 	bl	8000738 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   r0, =_estack
 8000b2c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000b30:	08003368 	.word	0x08003368
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b38:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000b3c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000b40:	20000130 	.word	0x20000130

08000b44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_IRQHandler>

08000b46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b52:	2003      	movs	r0, #3
 8000b54:	f000 f80e 	bl	8000b74 <HAL_InitTick>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e001      	b.n	8000b68 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b64:	f7ff fefc 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <HAL_InitTick+0x88>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d02b      	beq.n	8000be4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_InitTick+0x8c>)
 8000b8e:	681c      	ldr	r4, [r3, #0]
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <HAL_InitTick+0x88>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	0019      	movs	r1, r3
 8000b96:	23fa      	movs	r3, #250	@ 0xfa
 8000b98:	0098      	lsls	r0, r3, #2
 8000b9a:	f7ff fab5 	bl	8000108 <__udivsi3>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f7ff fab0 	bl	8000108 <__udivsi3>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f913 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d112      	bne.n	8000bda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d80a      	bhi.n	8000bd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f8f2 	bl	8000dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_InitTick+0x90>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e00d      	b.n	8000bec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e008      	b.n	8000bec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e003      	b.n	8000bec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b005      	add	sp, #20
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	20000010 	.word	0x20000010
 8000c00:	20000008 	.word	0x20000008
 8000c04:	2000000c 	.word	0x2000000c

08000c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	001a      	movs	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <HAL_IncTick+0x20>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	18d2      	adds	r2, r2, r3
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_IncTick+0x20>)
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	20000010 	.word	0x20000010
 8000c28:	2000012c 	.word	0x2000012c

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b02      	ldr	r3, [pc, #8]	@ (8000c3c <HAL_GetTick+0x10>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	2000012c 	.word	0x2000012c

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff fff0 	bl	8000c2c <HAL_GetTick>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	001a      	movs	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	189b      	adds	r3, r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	f7ff ffe0 	bl	8000c2c <HAL_GetTick>
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	20000010 	.word	0x20000010

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c9c:	d828      	bhi.n	8000cf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d5c <__NVIC_SetPriority+0xd4>)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	33c0      	adds	r3, #192	@ 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	589b      	ldr	r3, [r3, r2]
 8000cae:	1dfa      	adds	r2, r7, #7
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	21ff      	movs	r1, #255	@ 0xff
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	22ff      	movs	r2, #255	@ 0xff
 8000ccc:	401a      	ands	r2, r3
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	4003      	ands	r3, r0
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cdc:	481f      	ldr	r0, [pc, #124]	@ (8000d5c <__NVIC_SetPriority+0xd4>)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	33c0      	adds	r3, #192	@ 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cee:	e031      	b.n	8000d54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d60 <__NVIC_SetPriority+0xd8>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3306      	adds	r3, #6
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	3304      	adds	r3, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1dfa      	adds	r2, r7, #7
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	0011      	movs	r1, r2
 8000d10:	2203      	movs	r2, #3
 8000d12:	400a      	ands	r2, r1
 8000d14:	00d2      	lsls	r2, r2, #3
 8000d16:	21ff      	movs	r1, #255	@ 0xff
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	22ff      	movs	r2, #255	@ 0xff
 8000d28:	401a      	ands	r2, r3
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2303      	movs	r3, #3
 8000d32:	4003      	ands	r3, r0
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <__NVIC_SetPriority+0xd8>)
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	001c      	movs	r4, r3
 8000d40:	230f      	movs	r3, #15
 8000d42:	4023      	ands	r3, r4
 8000d44:	3b08      	subs	r3, #8
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	3306      	adds	r3, #6
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	18c3      	adds	r3, r0, r3
 8000d50:	3304      	adds	r3, #4
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b003      	add	sp, #12
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	045b      	lsls	r3, r3, #17
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d301      	bcc.n	8000d7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e010      	b.n	8000d9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <SysTick_Config+0x44>)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	3a01      	subs	r2, #1
 8000d82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d84:	2301      	movs	r3, #1
 8000d86:	425b      	negs	r3, r3
 8000d88:	2103      	movs	r1, #3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ff7c 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <SysTick_Config+0x44>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <SysTick_Config+0x44>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	210f      	movs	r1, #15
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	1c02      	adds	r2, r0, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ffbf 	bl	8000d64 <SysTick_Config>
 8000de6:	0003      	movs	r3, r0
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000dfe:	e14d      	b.n	800109c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d100      	bne.n	8000e18 <HAL_GPIO_Init+0x28>
 8000e16:	e13e      	b.n	8001096 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x38>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b12      	cmp	r3, #18
 8000e26:	d125      	bne.n	8000e74 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	58d3      	ldr	r3, [r2, r3]
 8000e34:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2207      	movs	r2, #7
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	43da      	mvns	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	220f      	movs	r2, #15
 8000e52:	401a      	ands	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	2107      	movs	r1, #7
 8000e58:	400b      	ands	r3, r1
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	6979      	ldr	r1, [r7, #20]
 8000e72:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	409a      	lsls	r2, r3
 8000e82:	0013      	movs	r3, r2
 8000e84:	43da      	mvns	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	401a      	ands	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d00b      	beq.n	8000ec8 <HAL_GPIO_Init+0xd8>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebc:	2b11      	cmp	r3, #17
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b12      	cmp	r3, #18
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	4013      	ands	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	2201      	movs	r2, #1
 8000f16:	401a      	ands	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	4013      	ands	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	2380      	movs	r3, #128	@ 0x80
 8000f68:	055b      	lsls	r3, r3, #21
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d100      	bne.n	8000f70 <HAL_GPIO_Init+0x180>
 8000f6e:	e092      	b.n	8001096 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f70:	4a50      	ldr	r2, [pc, #320]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3318      	adds	r3, #24
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	589b      	ldr	r3, [r3, r2]
 8000f7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2203      	movs	r2, #3
 8000f82:	4013      	ands	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	220f      	movs	r2, #15
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	23a0      	movs	r3, #160	@ 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x1d6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	@ (80010b8 <HAL_GPIO_Init+0x2c8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x1d2>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a44      	ldr	r2, [pc, #272]	@ (80010bc <HAL_GPIO_Init+0x2cc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x1ce>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a43      	ldr	r2, [pc, #268]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x1ca>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	2103      	movs	r1, #3
 8000fcc:	400a      	ands	r2, r1
 8000fce:	00d2      	lsls	r2, r2, #3
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000fd8:	4936      	ldr	r1, [pc, #216]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3318      	adds	r3, #24
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000fe6:	4a33      	ldr	r2, [pc, #204]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	58d3      	ldr	r3, [r2, r3]
 8000fec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	025b      	lsls	r3, r3, #9
 8001000:	4013      	ands	r3, r2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800100c:	4929      	ldr	r1, [pc, #164]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001014:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001016:	2384      	movs	r3, #132	@ 0x84
 8001018:	58d3      	ldr	r3, [r2, r3]
 800101a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4013      	ands	r3, r2
 8001024:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800103a:	491e      	ldr	r1, [pc, #120]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 800103c:	2284      	movs	r2, #132	@ 0x84
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43da      	mvns	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4013      	ands	r3, r2
 8001050:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	035b      	lsls	r3, r3, #13
 800105a:	4013      	ands	r3, r2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43da      	mvns	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	039b      	lsls	r3, r3, #14
 8001084:	4013      	ands	r3, r2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3301      	adds	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	1e13      	subs	r3, r2, #0
 80010a6:	d000      	beq.n	80010aa <HAL_GPIO_Init+0x2ba>
 80010a8:	e6aa      	b.n	8000e00 <HAL_GPIO_Init+0x10>
  }
}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b006      	add	sp, #24
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021800 	.word	0x40021800
 80010b8:	50000400 	.word	0x50000400
 80010bc:	50000800 	.word	0x50000800
 80010c0:	50001400 	.word	0x50001400

080010c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	000a      	movs	r2, r1
 80010ce:	1cbb      	adds	r3, r7, #2
 80010d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	1cba      	adds	r2, r7, #2
 80010d8:	8812      	ldrh	r2, [r2, #0]
 80010da:	4013      	ands	r3, r2
 80010dc:	d004      	beq.n	80010e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e003      	b.n	80010f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	781b      	ldrb	r3, [r3, #0]
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	0008      	movs	r0, r1
 8001108:	0011      	movs	r1, r2
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	1c02      	adds	r2, r0, #0
 800110e:	801a      	strh	r2, [r3, #0]
 8001110:	1c7b      	adds	r3, r7, #1
 8001112:	1c0a      	adds	r2, r1, #0
 8001114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001116:	1c7b      	adds	r3, r7, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001126:	e003      	b.n	8001130 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001128:	1cbb      	adds	r3, r7, #2
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1d0      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_OscConfig+0x1e>
 8001154:	e069      	b.n	800122a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001156:	4bc8      	ldr	r3, [pc, #800]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2238      	movs	r2, #56	@ 0x38
 800115c:	4013      	ands	r3, r2
 800115e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d15d      	bne.n	800122a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e1bc      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	2380      	movs	r3, #128	@ 0x80
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	429a      	cmp	r2, r3
 800117c:	d107      	bne.n	800118e <HAL_RCC_OscConfig+0x56>
 800117e:	4bbe      	ldr	r3, [pc, #760]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4bbd      	ldr	r3, [pc, #756]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	0249      	lsls	r1, r1, #9
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e020      	b.n	80011d0 <HAL_RCC_OscConfig+0x98>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	23a0      	movs	r3, #160	@ 0xa0
 8001194:	02db      	lsls	r3, r3, #11
 8001196:	429a      	cmp	r2, r3
 8001198:	d10e      	bne.n	80011b8 <HAL_RCC_OscConfig+0x80>
 800119a:	4bb7      	ldr	r3, [pc, #732]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4bb6      	ldr	r3, [pc, #728]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011a0:	2180      	movs	r1, #128	@ 0x80
 80011a2:	02c9      	lsls	r1, r1, #11
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	4bb3      	ldr	r3, [pc, #716]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4bb2      	ldr	r3, [pc, #712]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011ae:	2180      	movs	r1, #128	@ 0x80
 80011b0:	0249      	lsls	r1, r1, #9
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0x98>
 80011b8:	4baf      	ldr	r3, [pc, #700]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4bae      	ldr	r3, [pc, #696]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011be:	49af      	ldr	r1, [pc, #700]	@ (800147c <HAL_RCC_OscConfig+0x344>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	4bac      	ldr	r3, [pc, #688]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4bab      	ldr	r3, [pc, #684]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011ca:	49ad      	ldr	r1, [pc, #692]	@ (8001480 <HAL_RCC_OscConfig+0x348>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d014      	beq.n	8001202 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fd28 	bl	8000c2c <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80011e2:	f7ff fd23 	bl	8000c2c <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	@ 0x64
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e17b      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0xaa>
 8001200:	e013      	b.n	800122a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff fd13 	bl	8000c2c <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800120c:	f7ff fd0e 	bl	8000c2c <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e166      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800121e:	4b96      	ldr	r3, [pc, #600]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	@ 0x80
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0xfe>
 8001234:	e086      	b.n	8001344 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001236:	4b90      	ldr	r3, [pc, #576]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2238      	movs	r2, #56	@ 0x38
 800123c:	4013      	ands	r3, r2
 800123e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d12f      	bne.n	80012a6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e14c      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b89      	ldr	r3, [pc, #548]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a8b      	ldr	r2, [pc, #556]	@ (8001484 <HAL_RCC_OscConfig+0x34c>)
 8001258:	4013      	ands	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	021a      	lsls	r2, r3, #8
 8001262:	4b85      	ldr	r3, [pc, #532]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001264:	430a      	orrs	r2, r1
 8001266:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800126e:	4b82      	ldr	r3, [pc, #520]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a85      	ldr	r2, [pc, #532]	@ (8001488 <HAL_RCC_OscConfig+0x350>)
 8001274:	4013      	ands	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	4b7e      	ldr	r3, [pc, #504]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001282:	4b7d      	ldr	r3, [pc, #500]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	0adb      	lsrs	r3, r3, #11
 8001288:	2207      	movs	r2, #7
 800128a:	4013      	ands	r3, r2
 800128c:	4a7f      	ldr	r2, [pc, #508]	@ (800148c <HAL_RCC_OscConfig+0x354>)
 800128e:	40da      	lsrs	r2, r3
 8001290:	4b7f      	ldr	r3, [pc, #508]	@ (8001490 <HAL_RCC_OscConfig+0x358>)
 8001292:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001294:	4b7f      	ldr	r3, [pc, #508]	@ (8001494 <HAL_RCC_OscConfig+0x35c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fc6b 	bl	8000b74 <HAL_InitTick>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d050      	beq.n	8001344 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e122      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d030      	beq.n	8001310 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ae:	4b72      	ldr	r3, [pc, #456]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a75      	ldr	r2, [pc, #468]	@ (8001488 <HAL_RCC_OscConfig+0x350>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	0019      	movs	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80012c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80012c8:	2180      	movs	r1, #128	@ 0x80
 80012ca:	0049      	lsls	r1, r1, #1
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcac 	bl	8000c2c <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80012da:	f7ff fca7 	bl	8000c2c <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0ff      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ec:	4b62      	ldr	r3, [pc, #392]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2380      	movs	r3, #128	@ 0x80
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4a61      	ldr	r2, [pc, #388]	@ (8001484 <HAL_RCC_OscConfig+0x34c>)
 80012fe:	4013      	ands	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	021a      	lsls	r2, r3, #8
 8001308:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800130a:	430a      	orrs	r2, r1
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	e019      	b.n	8001344 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001310:	4b59      	ldr	r3, [pc, #356]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b58      	ldr	r3, [pc, #352]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001316:	4960      	ldr	r1, [pc, #384]	@ (8001498 <HAL_RCC_OscConfig+0x360>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fc86 	bl	8000c2c <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001326:	f7ff fc81 	bl	8000c2c <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e0d9      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001338:	4b4f      	ldr	r3, [pc, #316]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4013      	ands	r3, r2
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2208      	movs	r2, #8
 800134a:	4013      	ands	r3, r2
 800134c:	d042      	beq.n	80013d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800134e:	4b4a      	ldr	r3, [pc, #296]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2238      	movs	r2, #56	@ 0x38
 8001354:	4013      	ands	r3, r2
 8001356:	2b18      	cmp	r3, #24
 8001358:	d105      	bne.n	8001366 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d138      	bne.n	80013d4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0c2      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d019      	beq.n	80013a2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800136e:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001370:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001372:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fc57 	bl	8000c2c <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc52 	bl	8000c2c <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0aa      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001396:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d0f1      	beq.n	8001384 <HAL_RCC_OscConfig+0x24c>
 80013a0:	e018      	b.n	80013d4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013a2:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80013a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013a6:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	438a      	bics	r2, r1
 80013ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc3d 	bl	8000c2c <HAL_GetTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc38 	bl	8000c2c <HAL_GetTick>
 80013bc:	0002      	movs	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e090      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80013ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d1f1      	bne.n	80013b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2204      	movs	r2, #4
 80013da:	4013      	ands	r3, r2
 80013dc:	d100      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2a8>
 80013de:	e084      	b.n	80014ea <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2238      	movs	r2, #56	@ 0x38
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d000      	beq.n	80013fe <HAL_RCC_OscConfig+0x2c6>
 80013fc:	e075      	b.n	80014ea <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e074      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x2e0>
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800140c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001410:	2101      	movs	r1, #1
 8001412:	430a      	orrs	r2, r1
 8001414:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001416:	e01c      	b.n	8001452 <HAL_RCC_OscConfig+0x31a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x302>
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001426:	2104      	movs	r1, #4
 8001428:	430a      	orrs	r2, r1
 800142a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800142e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001432:	2101      	movs	r1, #1
 8001434:	430a      	orrs	r2, r1
 8001436:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x31a>
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800143c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001440:	2101      	movs	r1, #1
 8001442:	438a      	bics	r2, r1
 8001444:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 8001448:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_RCC_OscConfig+0x340>)
 800144c:	2104      	movs	r1, #4
 800144e:	438a      	bics	r2, r1
 8001450:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d028      	beq.n	80014ac <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fbe7 	bl	8000c2c <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001462:	e01d      	b.n	80014a0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fbe2 	bl	8000c2c <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_RCC_OscConfig+0x364>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d915      	bls.n	80014a0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e039      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
 8001478:	40021000 	.word	0x40021000
 800147c:	fffeffff 	.word	0xfffeffff
 8001480:	fffbffff 	.word	0xfffbffff
 8001484:	ffff80ff 	.word	0xffff80ff
 8001488:	ffffc7ff 	.word	0xffffc7ff
 800148c:	02dc6c00 	.word	0x02dc6c00
 8001490:	20000008 	.word	0x20000008
 8001494:	2000000c 	.word	0x2000000c
 8001498:	fffffeff 	.word	0xfffffeff
 800149c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_RCC_OscConfig+0x3bc>)
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0dc      	beq.n	8001464 <HAL_RCC_OscConfig+0x32c>
 80014aa:	e013      	b.n	80014d4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fbbe 	bl	8000c2c <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80014b4:	e009      	b.n	80014ca <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fbb9 	bl	8000c2c <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <HAL_RCC_OscConfig+0x3c0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e010      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_RCC_OscConfig+0x3bc>)
 80014cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ce:	2202      	movs	r2, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014d4:	230f      	movs	r3, #15
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d105      	bne.n	80014ea <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014de:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_RCC_OscConfig+0x3bc>)
 80014e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <HAL_RCC_OscConfig+0x3bc>)
 80014e4:	4905      	ldr	r1, [pc, #20]	@ (80014fc <HAL_RCC_OscConfig+0x3c4>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b006      	add	sp, #24
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021000 	.word	0x40021000
 80014f8:	00001388 	.word	0x00001388
 80014fc:	efffffff 	.word	0xefffffff

08001500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0e9      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001514:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2207      	movs	r2, #7
 800151a:	4013      	ands	r3, r2
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d91e      	bls.n	8001560 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2207      	movs	r2, #7
 8001528:	4393      	bics	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	4b70      	ldr	r3, [pc, #448]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001534:	f7ff fb7a 	bl	8000c2c <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800153c:	e009      	b.n	8001552 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800153e:	f7ff fb75 	bl	8000c2c <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a6a      	ldr	r2, [pc, #424]	@ (80016f4 <HAL_RCC_ClockConfig+0x1f4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0ca      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001552:	4b67      	ldr	r3, [pc, #412]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2207      	movs	r2, #7
 8001558:	4013      	ands	r3, r2
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d1ee      	bne.n	800153e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2202      	movs	r2, #2
 8001566:	4013      	ands	r3, r2
 8001568:	d017      	beq.n	800159a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001574:	4b60      	ldr	r3, [pc, #384]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a60      	ldr	r2, [pc, #384]	@ (80016fc <HAL_RCC_ClockConfig+0x1fc>)
 800157a:	401a      	ands	r2, r3
 800157c:	4b5e      	ldr	r3, [pc, #376]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 800157e:	21b0      	movs	r1, #176	@ 0xb0
 8001580:	0109      	lsls	r1, r1, #4
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001586:	4b5c      	ldr	r3, [pc, #368]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4a5d      	ldr	r2, [pc, #372]	@ (8001700 <HAL_RCC_ClockConfig+0x200>)
 800158c:	4013      	ands	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	4013      	ands	r3, r2
 80015a2:	d055      	beq.n	8001650 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80015a4:	4b54      	ldr	r3, [pc, #336]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	221c      	movs	r2, #28
 80015aa:	4393      	bics	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	4b51      	ldr	r3, [pc, #324]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c0:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	029b      	lsls	r3, r3, #10
 80015c8:	4013      	ands	r3, r2
 80015ca:	d11f      	bne.n	800160c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e08b      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4013      	ands	r3, r2
 80015e2:	d113      	bne.n	800160c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e07f      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80015f0:	4b41      	ldr	r3, [pc, #260]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f4:	2202      	movs	r2, #2
 80015f6:	4013      	ands	r3, r2
 80015f8:	d108      	bne.n	800160c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e074      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 8001600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e06d      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800160c:	4b3a      	ldr	r3, [pc, #232]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2207      	movs	r2, #7
 8001612:	4393      	bics	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 800161c:	430a      	orrs	r2, r1
 800161e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001620:	f7ff fb04 	bl	8000c2c <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001628:	e009      	b.n	800163e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800162a:	f7ff faff 	bl	8000c2c <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <HAL_RCC_ClockConfig+0x1f4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e054      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2238      	movs	r2, #56	@ 0x38
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	429a      	cmp	r2, r3
 800164e:	d1ec      	bne.n	800162a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2207      	movs	r2, #7
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d21e      	bcs.n	800169c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2207      	movs	r2, #7
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001670:	f7ff fadc 	bl	8000c2c <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001678:	e009      	b.n	800168e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800167a:	f7ff fad7 	bl	8000c2c <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	4a1b      	ldr	r2, [pc, #108]	@ (80016f4 <HAL_RCC_ClockConfig+0x1f4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e02c      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2204      	movs	r2, #4
 80016a2:	4013      	ands	r3, r2
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4a16      	ldr	r2, [pc, #88]	@ (8001704 <HAL_RCC_ClockConfig+0x204>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	0019      	movs	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016ba:	f000 f82b 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016be:	0001      	movs	r1, r0
 80016c0:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80016c2:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	220f      	movs	r2, #15
 80016c8:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_RCC_ClockConfig+0x208>)
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016d0:	221f      	movs	r2, #31
 80016d2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016d4:	000a      	movs	r2, r1
 80016d6:	40da      	lsrs	r2, r3
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_RCC_ClockConfig+0x20c>)
 80016da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <HAL_RCC_ClockConfig+0x210>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff fa47 	bl	8000b74 <HAL_InitTick>
 80016e6:	0003      	movs	r3, r0
}
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b004      	add	sp, #16
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40022000 	.word	0x40022000
 80016f4:	00001388 	.word	0x00001388
 80016f8:	40021000 	.word	0x40021000
 80016fc:	ffff84ff 	.word	0xffff84ff
 8001700:	fffff0ff 	.word	0xfffff0ff
 8001704:	ffff8fff 	.word	0xffff8fff
 8001708:	080032e8 	.word	0x080032e8
 800170c:	20000008 	.word	0x20000008
 8001710:	2000000c 	.word	0x2000000c

08001714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	2207      	movs	r2, #7
 8001722:	4013      	ands	r3, r2
 8001724:	3301      	adds	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2238      	movs	r2, #56	@ 0x38
 800172e:	4013      	ands	r3, r2
 8001730:	d10f      	bne.n	8001752 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0adb      	lsrs	r3, r3, #11
 8001738:	2207      	movs	r2, #7
 800173a:	4013      	ands	r3, r2
 800173c:	2201      	movs	r2, #1
 800173e:	409a      	lsls	r2, r3
 8001740:	0013      	movs	r3, r2
 8001742:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4819      	ldr	r0, [pc, #100]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001748:	f7fe fcde 	bl	8000108 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e01e      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2238      	movs	r2, #56	@ 0x38
 8001758:	4013      	ands	r3, r2
 800175a:	2b08      	cmp	r3, #8
 800175c:	d102      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e015      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2238      	movs	r2, #56	@ 0x38
 800176a:	4013      	ands	r3, r2
 800176c:	2b20      	cmp	r3, #32
 800176e:	d103      	bne.n	8001778 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2238      	movs	r2, #56	@ 0x38
 800177e:	4013      	ands	r3, r2
 8001780:	2b18      	cmp	r3, #24
 8001782:	d103      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001784:	23fa      	movs	r3, #250	@ 0xfa
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e001      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7fe fcb8 	bl	8000108 <__udivsi3>
 8001798:	0003      	movs	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800179c:	68fb      	ldr	r3, [r7, #12]
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b004      	add	sp, #16
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	40021000 	.word	0x40021000
 80017ac:	02dc6c00 	.word	0x02dc6c00
 80017b0:	007a1200 	.word	0x007a1200

080017b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017b8:	f7ff ffac 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80017bc:	0001      	movs	r1, r0
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80017c0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	220f      	movs	r2, #15
 80017c6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017c8:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017ce:	221f      	movs	r2, #31
 80017d0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017d2:	000a      	movs	r2, r1
 80017d4:	40da      	lsrs	r2, r3
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_RCC_GetHCLKFreq+0x38>)
 80017d8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80017da:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <HAL_RCC_GetHCLKFreq+0x38>)
 80017dc:	681b      	ldr	r3, [r3, #0]
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	080032e8 	.word	0x080032e8
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017f8:	0001      	movs	r1, r0
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	0b1b      	lsrs	r3, r3, #12
 8001800:	2207      	movs	r2, #7
 8001802:	401a      	ands	r2, r3
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	58d3      	ldr	r3, [r2, r3]
 800180a:	221f      	movs	r2, #31
 800180c:	4013      	ands	r3, r2
 800180e:	40d9      	lsrs	r1, r3
 8001810:	000b      	movs	r3, r1
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	08003328 	.word	0x08003328

08001820 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001828:	2313      	movs	r3, #19
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001830:	2312      	movs	r3, #18
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2240      	movs	r2, #64	@ 0x40
 800183e:	4013      	ands	r3, r2
 8001840:	d100      	bne.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001842:	e079      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001844:	2011      	movs	r0, #17
 8001846:	183b      	adds	r3, r7, r0
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184c:	4b63      	ldr	r3, [pc, #396]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800184e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001850:	2380      	movs	r3, #128	@ 0x80
 8001852:	055b      	lsls	r3, r3, #21
 8001854:	4013      	ands	r3, r2
 8001856:	d110      	bne.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	4b60      	ldr	r3, [pc, #384]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800185a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800185c:	4b5f      	ldr	r3, [pc, #380]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	0549      	lsls	r1, r1, #21
 8001862:	430a      	orrs	r2, r1
 8001864:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001866:	4b5d      	ldr	r3, [pc, #372]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	055b      	lsls	r3, r3, #21
 800186e:	4013      	ands	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001874:	183b      	adds	r3, r7, r0
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800187a:	4b58      	ldr	r3, [pc, #352]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800187c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800187e:	23c0      	movs	r3, #192	@ 0xc0
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4013      	ands	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d019      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	429a      	cmp	r2, r3
 8001894:	d014      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001896:	4b51      	ldr	r3, [pc, #324]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189a:	4a51      	ldr	r2, [pc, #324]	@ (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800189c:	4013      	ands	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018a0:	4b4e      	ldr	r3, [pc, #312]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018a4:	4b4d      	ldr	r3, [pc, #308]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018a6:	2180      	movs	r1, #128	@ 0x80
 80018a8:	0249      	lsls	r1, r1, #9
 80018aa:	430a      	orrs	r2, r1
 80018ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018ae:	4b4b      	ldr	r3, [pc, #300]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018b2:	4b4a      	ldr	r3, [pc, #296]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018b4:	494b      	ldr	r1, [pc, #300]	@ (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018b6:	400a      	ands	r2, r1
 80018b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80018ba:	4b48      	ldr	r3, [pc, #288]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d016      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff f9b0 	bl	8000c2c <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018d0:	e00c      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f9ab 	bl	8000c2c <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a42      	ldr	r2, [pc, #264]	@ (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d904      	bls.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80018e2:	2313      	movs	r3, #19
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	2203      	movs	r2, #3
 80018e8:	701a      	strb	r2, [r3, #0]
          break;
 80018ea:	e004      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018ec:	4b3b      	ldr	r3, [pc, #236]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0ed      	beq.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80018f6:	2313      	movs	r3, #19
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001900:	4b36      	ldr	r3, [pc, #216]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001904:	4a36      	ldr	r2, [pc, #216]	@ (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001906:	4013      	ands	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	4b33      	ldr	r3, [pc, #204]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001910:	430a      	orrs	r2, r1
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001914:	e005      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001916:	2312      	movs	r3, #18
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	2213      	movs	r2, #19
 800191c:	18ba      	adds	r2, r7, r2
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001922:	2311      	movs	r3, #17
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800192e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001932:	492e      	ldr	r1, [pc, #184]	@ (80019ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001934:	400a      	ands	r2, r1
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d009      	beq.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	2203      	movs	r2, #3
 8001948:	4393      	bics	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001952:	430a      	orrs	r2, r1
 8001954:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d009      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001964:	4a22      	ldr	r2, [pc, #136]	@ (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001970:	430a      	orrs	r2, r1
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2220      	movs	r2, #32
 800197a:	4013      	ands	r3, r2
 800197c:	d008      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	0899      	lsrs	r1, r3, #2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800198c:	430a      	orrs	r2, r1
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2204      	movs	r2, #4
 8001996:	4013      	ands	r3, r2
 8001998:	d009      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800199c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199e:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019aa:	430a      	orrs	r2, r1
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	4013      	ands	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	22e0      	movs	r2, #224	@ 0xe0
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
  }
  return status;
 80019cc:	2312      	movs	r3, #18
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	781b      	ldrb	r3, [r3, #0]
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b006      	add	sp, #24
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000
 80019e0:	fffffcff 	.word	0xfffffcff
 80019e4:	fffeffff 	.word	0xfffeffff
 80019e8:	00001388 	.word	0x00001388
 80019ec:	efffffff 	.word	0xefffffff
 80019f0:	ffffcfff 	.word	0xffffcfff
 80019f4:	ffff3fff 	.word	0xffff3fff

080019f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0a8      	b.n	8001b5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	2382      	movs	r3, #130	@ 0x82
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d009      	beq.n	8001a32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
 8001a24:	e005      	b.n	8001a32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	225d      	movs	r2, #93	@ 0x5d
 8001a3c:	5c9b      	ldrb	r3, [r3, r2]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	225c      	movs	r2, #92	@ 0x5c
 8001a48:	2100      	movs	r1, #0
 8001a4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7fe ff26 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	225d      	movs	r2, #93	@ 0x5d
 8001a58:	2102      	movs	r1, #2
 8001a5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2140      	movs	r1, #64	@ 0x40
 8001a68:	438a      	bics	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	23e0      	movs	r3, #224	@ 0xe0
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d902      	bls.n	8001a7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e002      	b.n	8001a84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	23f0      	movs	r3, #240	@ 0xf0
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d008      	beq.n	8001aa2 <HAL_SPI_Init+0xaa>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	23e0      	movs	r3, #224	@ 0xe0
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d002      	beq.n	8001aa2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2382      	movs	r3, #130	@ 0x82
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	401a      	ands	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6899      	ldr	r1, [r3, #8]
 8001ab0:	2384      	movs	r3, #132	@ 0x84
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2102      	movs	r1, #2
 8001abe:	400b      	ands	r3, r1
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	400b      	ands	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6999      	ldr	r1, [r3, #24]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2138      	movs	r1, #56	@ 0x38
 8001ade:	400b      	ands	r3, r1
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	2180      	movs	r1, #128	@ 0x80
 8001ae8:	400b      	ands	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	0011      	movs	r1, r2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	2204      	movs	r2, #4
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	2110      	movs	r1, #16
 8001b10:	400b      	ands	r3, r1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b18:	2108      	movs	r1, #8
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68d9      	ldr	r1, [r3, #12]
 8001b22:	23f0      	movs	r3, #240	@ 0xf0
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	400b      	ands	r3, r1
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	015b      	lsls	r3, r3, #5
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69da      	ldr	r2, [r3, #28]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4907      	ldr	r1, [pc, #28]	@ (8001b64 <HAL_SPI_Init+0x16c>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	225d      	movs	r2, #93	@ 0x5d
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b004      	add	sp, #16
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	fffff7ff 	.word	0xfffff7ff

08001b68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b78:	f7ff f858 	bl	8000c2c <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b80:	231a      	movs	r3, #26
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	1dba      	adds	r2, r7, #6
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	225d      	movs	r2, #93	@ 0x5d
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d001      	beq.n	8001b9a <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	e165      	b.n	8001e66 <HAL_SPI_Transmit+0x2fe>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_SPI_Transmit+0x40>
 8001ba0:	1dbb      	adds	r3, r7, #6
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e15c      	b.n	8001e66 <HAL_SPI_Transmit+0x2fe>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	225c      	movs	r2, #92	@ 0x5c
 8001bb0:	5c9b      	ldrb	r3, [r3, r2]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_SPI_Transmit+0x52>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e155      	b.n	8001e66 <HAL_SPI_Transmit+0x2fe>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	225c      	movs	r2, #92	@ 0x5c
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	225d      	movs	r2, #93	@ 0x5d
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1dba      	adds	r2, r7, #6
 8001bda:	8812      	ldrh	r2, [r2, #0]
 8001bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1dba      	adds	r2, r7, #6
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2244      	movs	r2, #68	@ 0x44
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2246      	movs	r2, #70	@ 0x46
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d110      	bne.n	8001c36 <HAL_SPI_Transmit+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2140      	movs	r1, #64	@ 0x40
 8001c20:	438a      	bics	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	01c9      	lsls	r1, r1, #7
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2240      	movs	r2, #64	@ 0x40
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b40      	cmp	r3, #64	@ 0x40
 8001c42:	d007      	beq.n	8001c54 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2140      	movs	r1, #64	@ 0x40
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	23e0      	movs	r3, #224	@ 0xe0
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d953      	bls.n	8001d08 <HAL_SPI_Transmit+0x1a0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_SPI_Transmit+0x10a>
 8001c68:	231a      	movs	r3, #26
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d144      	bne.n	8001cfc <HAL_SPI_Transmit+0x194>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c82:	1c9a      	adds	r2, r3, #2
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c96:	e031      	b.n	8001cfc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d112      	bne.n	8001ccc <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb6:	1c9a      	adds	r2, r3, #2
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001cca:	e017      	b.n	8001cfc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ccc:	f7fe ffae 	bl	8000c2c <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d802      	bhi.n	8001ce2 <HAL_SPI_Transmit+0x17a>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	d102      	bne.n	8001ce8 <HAL_SPI_Transmit+0x180>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_SPI_Transmit+0x194>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	225d      	movs	r2, #93	@ 0x5d
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	225c      	movs	r2, #92	@ 0x5c
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0b4      	b.n	8001e66 <HAL_SPI_Transmit+0x2fe>
    while (hspi->TxXferCount > 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1c8      	bne.n	8001c98 <HAL_SPI_Transmit+0x130>
 8001d06:	e085      	b.n	8001e14 <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_SPI_Transmit+0x1b4>
 8001d10:	231a      	movs	r3, #26
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d000      	beq.n	8001d1c <HAL_SPI_Transmit+0x1b4>
 8001d1a:	e076      	b.n	8001e0a <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d912      	bls.n	8001d4c <HAL_SPI_Transmit+0x1e4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d36:	1c9a      	adds	r2, r3, #2
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b02      	subs	r3, #2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d4a:	e05e      	b.n	8001e0a <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	330c      	adds	r3, #12
 8001d56:	7812      	ldrb	r2, [r2, #0]
 8001d58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d72:	e04a      	b.n	8001e0a <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d12b      	bne.n	8001dda <HAL_SPI_Transmit+0x272>
      {
        if (hspi->TxXferCount > 1U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d912      	bls.n	8001db2 <HAL_SPI_Transmit+0x24a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b02      	subs	r3, #2
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001db0:	e02b      	b.n	8001e0a <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	330c      	adds	r3, #12
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001dd8:	e017      	b.n	8001e0a <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dda:	f7fe ff27 	bl	8000c2c <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d802      	bhi.n	8001df0 <HAL_SPI_Transmit+0x288>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	d102      	bne.n	8001df6 <HAL_SPI_Transmit+0x28e>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_SPI_Transmit+0x2a2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	225d      	movs	r2, #93	@ 0x5d
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	225c      	movs	r2, #92	@ 0x5c
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e02d      	b.n	8001e66 <HAL_SPI_Transmit+0x2fe>
    while (hspi->TxXferCount > 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1af      	bne.n	8001d74 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 fd3a 	bl	8002894 <SPI_EndRxTxTransaction>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	225d      	movs	r2, #93	@ 0x5d
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	225c      	movs	r2, #92	@ 0x5c
 8001e54:	2100      	movs	r1, #0
 8001e56:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_SPI_Transmit+0x2fc>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_SPI_Transmit+0x2fe>
  }
  else
  {
    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
  }
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b008      	add	sp, #32
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	1dbb      	adds	r3, r7, #6
 8001e7e:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	225d      	movs	r2, #93	@ 0x5d
 8001e84:	5c9b      	ldrb	r3, [r3, r2]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d001      	beq.n	8001e90 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e12c      	b.n	80020ea <HAL_SPI_Receive+0x27a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	2382      	movs	r3, #130	@ 0x82
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d113      	bne.n	8001ec4 <HAL_SPI_Receive+0x54>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10f      	bne.n	8001ec4 <HAL_SPI_Receive+0x54>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	225d      	movs	r2, #93	@ 0x5d
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001eac:	1dbb      	adds	r3, r7, #6
 8001eae:	881c      	ldrh	r4, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	0023      	movs	r3, r4
 8001ebc:	f000 f91e 	bl	80020fc <HAL_SPI_TransmitReceive>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	e112      	b.n	80020ea <HAL_SPI_Receive+0x27a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec4:	f7fe feb2 	bl	8000c2c <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	617b      	str	r3, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_SPI_Receive+0x6a>
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_SPI_Receive+0x6e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e105      	b.n	80020ea <HAL_SPI_Receive+0x27a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	225c      	movs	r2, #92	@ 0x5c
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_SPI_Receive+0x7c>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e0fe      	b.n	80020ea <HAL_SPI_Receive+0x27a>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	225c      	movs	r2, #92	@ 0x5c
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	225d      	movs	r2, #93	@ 0x5d
 8001ef8:	2104      	movs	r1, #4
 8001efa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1dba      	adds	r2, r7, #6
 8001f0c:	2144      	movs	r1, #68	@ 0x44
 8001f0e:	8812      	ldrh	r2, [r2, #0]
 8001f10:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1dba      	adds	r2, r7, #6
 8001f16:	2146      	movs	r1, #70	@ 0x46
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	23e0      	movs	r3, #224	@ 0xe0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d908      	bls.n	8001f58 <HAL_SPI_Receive+0xe8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4968      	ldr	r1, [pc, #416]	@ (80020f4 <HAL_SPI_Receive+0x284>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	e008      	b.n	8001f6a <HAL_SPI_Receive+0xfa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2180      	movs	r1, #128	@ 0x80
 8001f64:	0149      	lsls	r1, r1, #5
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d10f      	bne.n	8001f96 <HAL_SPI_Receive+0x126>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2140      	movs	r1, #64	@ 0x40
 8001f82:	438a      	bics	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4959      	ldr	r1, [pc, #356]	@ (80020f8 <HAL_SPI_Receive+0x288>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2240      	movs	r2, #64	@ 0x40
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b40      	cmp	r3, #64	@ 0x40
 8001fa2:	d007      	beq.n	8001fb4 <HAL_SPI_Receive+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2140      	movs	r1, #64	@ 0x40
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	23e0      	movs	r3, #224	@ 0xe0
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d900      	bls.n	8001fc2 <HAL_SPI_Receive+0x152>
 8001fc0:	e073      	b.n	80020aa <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001fc2:	e036      	b.n	8002032 <HAL_SPI_Receive+0x1c2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d117      	bne.n	8002002 <HAL_SPI_Receive+0x192>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	001a      	movs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2246      	movs	r2, #70	@ 0x46
 8001ff2:	5a9b      	ldrh	r3, [r3, r2]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b299      	uxth	r1, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2246      	movs	r2, #70	@ 0x46
 8001ffe:	5299      	strh	r1, [r3, r2]
 8002000:	e017      	b.n	8002032 <HAL_SPI_Receive+0x1c2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002002:	f7fe fe13 	bl	8000c2c <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d802      	bhi.n	8002018 <HAL_SPI_Receive+0x1a8>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	d102      	bne.n	800201e <HAL_SPI_Receive+0x1ae>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_SPI_Receive+0x1c2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	225d      	movs	r2, #93	@ 0x5d
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	225c      	movs	r2, #92	@ 0x5c
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e05b      	b.n	80020ea <HAL_SPI_Receive+0x27a>
    while (hspi->RxXferCount > 0U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2246      	movs	r2, #70	@ 0x46
 8002036:	5a9b      	ldrh	r3, [r3, r2]
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1c2      	bne.n	8001fc4 <HAL_SPI_Receive+0x154>
 800203e:	e03a      	b.n	80020b6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
 800204a:	2b01      	cmp	r3, #1
 800204c:	d115      	bne.n	800207a <HAL_SPI_Receive+0x20a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	b292      	uxth	r2, r2
 800205a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	1c9a      	adds	r2, r3, #2
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2246      	movs	r2, #70	@ 0x46
 800206a:	5a9b      	ldrh	r3, [r3, r2]
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b299      	uxth	r1, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2246      	movs	r2, #70	@ 0x46
 8002076:	5299      	strh	r1, [r3, r2]
 8002078:	e017      	b.n	80020aa <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800207a:	f7fe fdd7 	bl	8000c2c <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d802      	bhi.n	8002090 <HAL_SPI_Receive+0x220>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	d102      	bne.n	8002096 <HAL_SPI_Receive+0x226>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_SPI_Receive+0x23a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	225d      	movs	r2, #93	@ 0x5d
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	225c      	movs	r2, #92	@ 0x5c
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e01f      	b.n	80020ea <HAL_SPI_Receive+0x27a>
    while (hspi->RxXferCount > 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2246      	movs	r2, #70	@ 0x46
 80020ae:	5a9b      	ldrh	r3, [r3, r2]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1c4      	bne.n	8002040 <HAL_SPI_Receive+0x1d0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 fb8b 	bl	80027d8 <SPI_EndRxTransaction>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d002      	beq.n	80020cc <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	225d      	movs	r2, #93	@ 0x5d
 80020d0:	2101      	movs	r1, #1
 80020d2:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	225c      	movs	r2, #92	@ 0x5c
 80020d8:	2100      	movs	r1, #0
 80020da:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_SPI_Receive+0x278>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_SPI_Receive+0x27a>
  }
  else
  {
    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
  }
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b007      	add	sp, #28
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	ffffefff 	.word	0xffffefff
 80020f8:	ffffbfff 	.word	0xffffbfff

080020fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	001a      	movs	r2, r3
 800210a:	1cbb      	adds	r3, r7, #2
 800210c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800210e:	2301      	movs	r3, #1
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002112:	f7fe fd8b 	bl	8000c2c <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800211a:	201f      	movs	r0, #31
 800211c:	183b      	adds	r3, r7, r0
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	215d      	movs	r1, #93	@ 0x5d
 8002122:	5c52      	ldrb	r2, [r2, r1]
 8002124:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800212c:	2316      	movs	r3, #22
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	1cba      	adds	r2, r7, #2
 8002132:	8812      	ldrh	r2, [r2, #0]
 8002134:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8002136:	2314      	movs	r3, #20
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	1cba      	adds	r2, r7, #2
 800213c:	8812      	ldrh	r2, [r2, #0]
 800213e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002140:	183b      	adds	r3, r7, r0
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d00e      	beq.n	8002166 <HAL_SPI_TransmitReceive+0x6a>
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	2382      	movs	r3, #130	@ 0x82
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	429a      	cmp	r2, r3
 8002150:	d107      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x66>
 800215a:	183b      	adds	r3, r7, r0
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b04      	cmp	r3, #4
 8002160:	d001      	beq.n	8002166 <HAL_SPI_TransmitReceive+0x6a>
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	e203      	b.n	800256e <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_SPI_TransmitReceive+0x7e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_SPI_TransmitReceive+0x7e>
 8002172:	1cbb      	adds	r3, r7, #2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1f7      	b.n	800256e <HAL_SPI_TransmitReceive+0x472>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	225c      	movs	r2, #92	@ 0x5c
 8002182:	5c9b      	ldrb	r3, [r3, r2]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_SPI_TransmitReceive+0x90>
 8002188:	2302      	movs	r3, #2
 800218a:	e1f0      	b.n	800256e <HAL_SPI_TransmitReceive+0x472>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	225c      	movs	r2, #92	@ 0x5c
 8002190:	2101      	movs	r1, #1
 8002192:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	225d      	movs	r2, #93	@ 0x5d
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b04      	cmp	r3, #4
 800219e:	d003      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	225d      	movs	r2, #93	@ 0x5d
 80021a4:	2105      	movs	r1, #5
 80021a6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1cba      	adds	r2, r7, #2
 80021b8:	2146      	movs	r1, #70	@ 0x46
 80021ba:	8812      	ldrh	r2, [r2, #0]
 80021bc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1cba      	adds	r2, r7, #2
 80021c2:	2144      	movs	r1, #68	@ 0x44
 80021c4:	8812      	ldrh	r2, [r2, #0]
 80021c6:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1cba      	adds	r2, r7, #2
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1cba      	adds	r2, r7, #2
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	23e0      	movs	r3, #224	@ 0xe0
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d804      	bhi.n	8002200 <HAL_SPI_TransmitReceive+0x104>
 80021f6:	2314      	movs	r3, #20
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d908      	bls.n	8002212 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	49c1      	ldr	r1, [pc, #772]	@ (8002510 <HAL_SPI_TransmitReceive+0x414>)
 800220c:	400a      	ands	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	e008      	b.n	8002224 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	0149      	lsls	r1, r1, #5
 8002220:	430a      	orrs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2240      	movs	r2, #64	@ 0x40
 800222c:	4013      	ands	r3, r2
 800222e:	2b40      	cmp	r3, #64	@ 0x40
 8002230:	d007      	beq.n	8002242 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2140      	movs	r1, #64	@ 0x40
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	23e0      	movs	r3, #224	@ 0xe0
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	429a      	cmp	r2, r3
 800224c:	d800      	bhi.n	8002250 <HAL_SPI_TransmitReceive+0x154>
 800224e:	e084      	b.n	800235a <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_SPI_TransmitReceive+0x168>
 8002258:	2316      	movs	r3, #22
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d000      	beq.n	8002264 <HAL_SPI_TransmitReceive+0x168>
 8002262:	e06e      	b.n	8002342 <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	881a      	ldrh	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002274:	1c9a      	adds	r2, r3, #2
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002288:	e05b      	b.n	8002342 <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d11b      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x1d4>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d016      	beq.n	80022d0 <HAL_SPI_TransmitReceive+0x1d4>
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d113      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d11c      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x21c>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2246      	movs	r2, #70	@ 0x46
 80022e2:	5a9b      	ldrh	r3, [r3, r2]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	b292      	uxth	r2, r2
 80022f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	1c9a      	adds	r2, r3, #2
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2246      	movs	r2, #70	@ 0x46
 8002306:	5a9b      	ldrh	r3, [r3, r2]
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b299      	uxth	r1, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2246      	movs	r2, #70	@ 0x46
 8002312:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002318:	f7fe fc88 	bl	8000c2c <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002324:	429a      	cmp	r2, r3
 8002326:	d80c      	bhi.n	8002342 <HAL_SPI_TransmitReceive+0x246>
 8002328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232a:	3301      	adds	r3, #1
 800232c:	d009      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x246>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	225d      	movs	r2, #93	@ 0x5d
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	225c      	movs	r2, #92	@ 0x5c
 800233a:	2100      	movs	r1, #0
 800233c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e115      	b.n	800256e <HAL_SPI_TransmitReceive+0x472>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d19e      	bne.n	800228a <HAL_SPI_TransmitReceive+0x18e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2246      	movs	r2, #70	@ 0x46
 8002350:	5a9b      	ldrh	r3, [r3, r2]
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d198      	bne.n	800228a <HAL_SPI_TransmitReceive+0x18e>
 8002358:	e0e9      	b.n	800252e <HAL_SPI_TransmitReceive+0x432>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_SPI_TransmitReceive+0x272>
 8002362:	2316      	movs	r3, #22
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d000      	beq.n	800236e <HAL_SPI_TransmitReceive+0x272>
 800236c:	e0d2      	b.n	8002514 <HAL_SPI_TransmitReceive+0x418>
    {
      if (hspi->TxXferCount > 1U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d912      	bls.n	800239e <HAL_SPI_TransmitReceive+0x2a2>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	1c9a      	adds	r2, r3, #2
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b02      	subs	r3, #2
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800239c:	e0ba      	b.n	8002514 <HAL_SPI_TransmitReceive+0x418>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c4:	e0a6      	b.n	8002514 <HAL_SPI_TransmitReceive+0x418>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d134      	bne.n	800243e <HAL_SPI_TransmitReceive+0x342>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02f      	beq.n	800243e <HAL_SPI_TransmitReceive+0x342>
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d12c      	bne.n	800243e <HAL_SPI_TransmitReceive+0x342>
      {
        if (hspi->TxXferCount > 1U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d912      	bls.n	8002414 <HAL_SPI_TransmitReceive+0x318>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fe:	1c9a      	adds	r2, r3, #2
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b02      	subs	r3, #2
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002412:	e012      	b.n	800243a <HAL_SPI_TransmitReceive+0x33e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	2b01      	cmp	r3, #1
 800244a:	d149      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x3e4>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2246      	movs	r2, #70	@ 0x46
 8002450:	5a9b      	ldrh	r3, [r3, r2]
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d043      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x3e4>
      {
        if (hspi->RxXferCount > 1U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2246      	movs	r2, #70	@ 0x46
 800245c:	5a9b      	ldrh	r3, [r3, r2]
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d924      	bls.n	80024ae <HAL_SPI_TransmitReceive+0x3b2>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	b292      	uxth	r2, r2
 8002470:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	1c9a      	adds	r2, r3, #2
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2246      	movs	r2, #70	@ 0x46
 8002480:	5a9b      	ldrh	r3, [r3, r2]
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b02      	subs	r3, #2
 8002486:	b299      	uxth	r1, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2246      	movs	r2, #70	@ 0x46
 800248c:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2246      	movs	r2, #70	@ 0x46
 8002492:	5a9b      	ldrh	r3, [r3, r2]
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d820      	bhi.n	80024dc <HAL_SPI_TransmitReceive+0x3e0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2180      	movs	r1, #128	@ 0x80
 80024a6:	0149      	lsls	r1, r1, #5
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	e016      	b.n	80024dc <HAL_SPI_TransmitReceive+0x3e0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	001a      	movs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2246      	movs	r2, #70	@ 0x46
 80024ce:	5a9b      	ldrh	r3, [r3, r2]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b299      	uxth	r1, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2246      	movs	r2, #70	@ 0x46
 80024da:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024dc:	2301      	movs	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024e0:	f7fe fba4 	bl	8000c2c <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d802      	bhi.n	80024f6 <HAL_SPI_TransmitReceive+0x3fa>
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	3301      	adds	r3, #1
 80024f4:	d102      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x400>
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_SPI_TransmitReceive+0x418>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	225d      	movs	r2, #93	@ 0x5d
 8002500:	2101      	movs	r1, #1
 8002502:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	225c      	movs	r2, #92	@ 0x5c
 8002508:	2100      	movs	r1, #0
 800250a:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e02e      	b.n	800256e <HAL_SPI_TransmitReceive+0x472>
 8002510:	ffffefff 	.word	0xffffefff
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d000      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x424>
 800251e:	e752      	b.n	80023c6 <HAL_SPI_TransmitReceive+0x2ca>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2246      	movs	r2, #70	@ 0x46
 8002524:	5a9b      	ldrh	r3, [r3, r2]
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d000      	beq.n	800252e <HAL_SPI_TransmitReceive+0x432>
 800252c:	e74b      	b.n	80023c6 <HAL_SPI_TransmitReceive+0x2ca>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800252e:	6a3a      	ldr	r2, [r7, #32]
 8002530:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 f9ad 	bl	8002894 <SPI_EndRxTxTransaction>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d008      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x454>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	225c      	movs	r2, #92	@ 0x5c
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e00e      	b.n	800256e <HAL_SPI_TransmitReceive+0x472>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	225d      	movs	r2, #93	@ 0x5d
 8002554:	2101      	movs	r1, #1
 8002556:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	225c      	movs	r2, #92	@ 0x5c
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_SPI_TransmitReceive+0x470>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_SPI_TransmitReceive+0x472>
  }
  else
  {
    return HAL_OK;
 800256c:	2300      	movs	r3, #0
  }
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b00a      	add	sp, #40	@ 0x28
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			@ (mov r8, r8)

08002578 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002588:	f7fe fb50 	bl	8000c2c <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	18d3      	adds	r3, r2, r3
 8002596:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002598:	f7fe fb48 	bl	8000c2c <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025a0:	4b3a      	ldr	r3, [pc, #232]	@ (800268c <SPI_WaitFlagStateUntilTimeout+0x114>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	0d1b      	lsrs	r3, r3, #20
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	4353      	muls	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ae:	e058      	b.n	8002662 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	d055      	beq.n	8002662 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025b6:	f7fe fb39 	bl	8000c2c <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d902      	bls.n	80025cc <SPI_WaitFlagStateUntilTimeout+0x54>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d142      	bne.n	8002652 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	21e0      	movs	r1, #224	@ 0xe0
 80025d8:	438a      	bics	r2, r1
 80025da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2382      	movs	r3, #130	@ 0x82
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d113      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x98>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d005      	beq.n	8002600 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2140      	movs	r1, #64	@ 0x40
 800260c:	438a      	bics	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	019b      	lsls	r3, r3, #6
 8002618:	429a      	cmp	r2, r3
 800261a:	d110      	bne.n	800263e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	491a      	ldr	r1, [pc, #104]	@ (8002690 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002628:	400a      	ands	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	0189      	lsls	r1, r1, #6
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	225d      	movs	r2, #93	@ 0x5d
 8002642:	2101      	movs	r1, #1
 8002644:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	225c      	movs	r2, #92	@ 0x5c
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e017      	b.n	8002682 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3b01      	subs	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	425a      	negs	r2, r3
 8002672:	4153      	adcs	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	001a      	movs	r2, r3
 8002678:	1dfb      	adds	r3, r7, #7
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d197      	bne.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b008      	add	sp, #32
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	20000008 	.word	0x20000008
 8002690:	ffffdfff 	.word	0xffffdfff

08002694 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	@ 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026a2:	2317      	movs	r3, #23
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026aa:	f7fe fabf 	bl	8000c2c <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	18d3      	adds	r3, r2, r3
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80026ba:	f7fe fab7 	bl	8000c2c <HAL_GetTick>
 80026be:	0003      	movs	r3, r0
 80026c0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	0013      	movs	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	00da      	lsls	r2, r3, #3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	0d1b      	lsrs	r3, r3, #20
 80026da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026dc:	4353      	muls	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026e0:	e068      	b.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	23c0      	movs	r3, #192	@ 0xc0
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10a      	bne.n	8002702 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	2117      	movs	r1, #23
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	d055      	beq.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002708:	f7fe fa90 	bl	8000c2c <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002714:	429a      	cmp	r2, r3
 8002716:	d902      	bls.n	800271e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d142      	bne.n	80027a4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	21e0      	movs	r1, #224	@ 0xe0
 800272a:	438a      	bics	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	2382      	movs	r3, #130	@ 0x82
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	429a      	cmp	r2, r3
 8002738:	d113      	bne.n	8002762 <SPI_WaitFifoStateUntilTimeout+0xce>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	429a      	cmp	r2, r3
 8002744:	d005      	beq.n	8002752 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	429a      	cmp	r2, r3
 8002750:	d107      	bne.n	8002762 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2140      	movs	r1, #64	@ 0x40
 800275e:	438a      	bics	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	019b      	lsls	r3, r3, #6
 800276a:	429a      	cmp	r2, r3
 800276c:	d110      	bne.n	8002790 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4916      	ldr	r1, [pc, #88]	@ (80027d4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800277a:	400a      	ands	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	0189      	lsls	r1, r1, #6
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	225d      	movs	r2, #93	@ 0x5d
 8002794:	2101      	movs	r1, #1
 8002796:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	225c      	movs	r2, #92	@ 0x5c
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e010      	b.n	80027c6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d18e      	bne.n	80026e2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b00a      	add	sp, #40	@ 0x28
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	20000008 	.word	0x20000008
 80027d4:	ffffdfff 	.word	0xffffdfff

080027d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	2382      	movs	r3, #130	@ 0x82
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d113      	bne.n	8002818 <SPI_EndRxTransaction+0x40>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d005      	beq.n	8002808 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2140      	movs	r1, #64	@ 0x40
 8002814:	438a      	bics	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	0013      	movs	r3, r2
 8002822:	2200      	movs	r2, #0
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	f7ff fea7 	bl	8002578 <SPI_WaitFlagStateUntilTimeout>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d007      	beq.n	800283e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002832:	2220      	movs	r2, #32
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e026      	b.n	800288c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	2382      	movs	r3, #130	@ 0x82
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	429a      	cmp	r2, r3
 8002848:	d11f      	bne.n	800288a <SPI_EndRxTransaction+0xb2>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	429a      	cmp	r2, r3
 8002854:	d005      	beq.n	8002862 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	429a      	cmp	r2, r3
 8002860:	d113      	bne.n	800288a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	23c0      	movs	r3, #192	@ 0xc0
 8002866:	00d9      	lsls	r1, r3, #3
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	0013      	movs	r3, r2
 8002870:	2200      	movs	r2, #0
 8002872:	f7ff ff0f 	bl	8002694 <SPI_WaitFifoStateUntilTimeout>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d007      	beq.n	800288a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287e:	2220      	movs	r2, #32
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e000      	b.n	800288c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b004      	add	sp, #16
 8002892:	bd80      	pop	{r7, pc}

08002894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	23c0      	movs	r3, #192	@ 0xc0
 80028a4:	0159      	lsls	r1, r3, #5
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	0013      	movs	r3, r2
 80028ae:	2200      	movs	r2, #0
 80028b0:	f7ff fef0 	bl	8002694 <SPI_WaitFifoStateUntilTimeout>
 80028b4:	1e03      	subs	r3, r0, #0
 80028b6:	d007      	beq.n	80028c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028bc:	2220      	movs	r2, #32
 80028be:	431a      	orrs	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e027      	b.n	8002918 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	0013      	movs	r3, r2
 80028d2:	2200      	movs	r2, #0
 80028d4:	2180      	movs	r1, #128	@ 0x80
 80028d6:	f7ff fe4f 	bl	8002578 <SPI_WaitFlagStateUntilTimeout>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d007      	beq.n	80028ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e2:	2220      	movs	r2, #32
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e014      	b.n	8002918 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	23c0      	movs	r3, #192	@ 0xc0
 80028f2:	00d9      	lsls	r1, r3, #3
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	0013      	movs	r3, r2
 80028fc:	2200      	movs	r2, #0
 80028fe:	f7ff fec9 	bl	8002694 <SPI_WaitFifoStateUntilTimeout>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d007      	beq.n	8002916 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290a:	2220      	movs	r2, #32
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e000      	b.n	8002918 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e046      	b.n	80029c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2288      	movs	r2, #136	@ 0x88
 8002936:	589b      	ldr	r3, [r3, r2]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d107      	bne.n	800294c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2284      	movs	r2, #132	@ 0x84
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f7fe f888 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2288      	movs	r2, #136	@ 0x88
 8002950:	2124      	movs	r1, #36	@ 0x24
 8002952:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	438a      	bics	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 fa4e 	bl	8002e10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f8cc 	bl	8002b14 <UART_SetConfig>
 800297c:	0003      	movs	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e01c      	b.n	80029c0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	490d      	ldr	r1, [pc, #52]	@ (80029c8 <HAL_UART_Init+0xa8>)
 8002992:	400a      	ands	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	212a      	movs	r1, #42	@ 0x2a
 80029a2:	438a      	bics	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 fadd 	bl	8002f78 <UART_CheckIdleState>
 80029be:	0003      	movs	r3, r0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	ffffb7ff 	.word	0xffffb7ff

080029cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	1dbb      	adds	r3, r7, #6
 80029da:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2288      	movs	r2, #136	@ 0x88
 80029e0:	589b      	ldr	r3, [r3, r2]
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d000      	beq.n	80029e8 <HAL_UART_Transmit+0x1c>
 80029e6:	e090      	b.n	8002b0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_UART_Transmit+0x2a>
 80029ee:	1dbb      	adds	r3, r7, #6
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e088      	b.n	8002b0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	015b      	lsls	r3, r3, #5
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d109      	bne.n	8002a1a <HAL_UART_Transmit+0x4e>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	d001      	beq.n	8002a1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e078      	b.n	8002b0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2290      	movs	r2, #144	@ 0x90
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2288      	movs	r2, #136	@ 0x88
 8002a26:	2121      	movs	r1, #33	@ 0x21
 8002a28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe f8ff 	bl	8000c2c <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1dba      	adds	r2, r7, #6
 8002a36:	2154      	movs	r1, #84	@ 0x54
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1dba      	adds	r2, r7, #6
 8002a40:	2156      	movs	r1, #86	@ 0x56
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	015b      	lsls	r3, r3, #5
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x98>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a6c:	e030      	b.n	8002ad0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	0013      	movs	r3, r2
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2180      	movs	r1, #128	@ 0x80
 8002a7c:	f000 fb26 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002a80:	1e03      	subs	r3, r0, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2288      	movs	r2, #136	@ 0x88
 8002a88:	2120      	movs	r1, #32
 8002a8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e03d      	b.n	8002b0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	05d2      	lsls	r2, r2, #23
 8002aa2:	0dd2      	lsrs	r2, r2, #23
 8002aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e007      	b.n	8002abe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2256      	movs	r2, #86	@ 0x56
 8002ac2:	5a9b      	ldrh	r3, [r3, r2]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2256      	movs	r2, #86	@ 0x56
 8002ace:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2256      	movs	r2, #86	@ 0x56
 8002ad4:	5a9b      	ldrh	r3, [r3, r2]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1c8      	bne.n	8002a6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2140      	movs	r1, #64	@ 0x40
 8002aea:	f000 faef 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d005      	beq.n	8002afe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2288      	movs	r2, #136	@ 0x88
 8002af6:	2120      	movs	r1, #32
 8002af8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e006      	b.n	8002b0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2288      	movs	r2, #136	@ 0x88
 8002b02:	2120      	movs	r1, #32
 8002b04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
  }
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b008      	add	sp, #32
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b1c:	231e      	movs	r3, #30
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4aab      	ldr	r2, [pc, #684]	@ (8002df0 <UART_SetConfig+0x2dc>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4aa6      	ldr	r2, [pc, #664]	@ (8002df4 <UART_SetConfig+0x2e0>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a9d      	ldr	r2, [pc, #628]	@ (8002df8 <UART_SetConfig+0x2e4>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b96:	220f      	movs	r2, #15
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a93      	ldr	r2, [pc, #588]	@ (8002dfc <UART_SetConfig+0x2e8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d127      	bne.n	8002c02 <UART_SetConfig+0xee>
 8002bb2:	4b93      	ldr	r3, [pc, #588]	@ (8002e00 <UART_SetConfig+0x2ec>)
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d017      	beq.n	8002bee <UART_SetConfig+0xda>
 8002bbe:	d81b      	bhi.n	8002bf8 <UART_SetConfig+0xe4>
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d00a      	beq.n	8002bda <UART_SetConfig+0xc6>
 8002bc4:	d818      	bhi.n	8002bf8 <UART_SetConfig+0xe4>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <UART_SetConfig+0xbc>
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d00a      	beq.n	8002be4 <UART_SetConfig+0xd0>
 8002bce:	e013      	b.n	8002bf8 <UART_SetConfig+0xe4>
 8002bd0:	231f      	movs	r3, #31
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e021      	b.n	8002c1e <UART_SetConfig+0x10a>
 8002bda:	231f      	movs	r3, #31
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e01c      	b.n	8002c1e <UART_SetConfig+0x10a>
 8002be4:	231f      	movs	r3, #31
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2204      	movs	r2, #4
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e017      	b.n	8002c1e <UART_SetConfig+0x10a>
 8002bee:	231f      	movs	r3, #31
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e012      	b.n	8002c1e <UART_SetConfig+0x10a>
 8002bf8:	231f      	movs	r3, #31
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e00d      	b.n	8002c1e <UART_SetConfig+0x10a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7f      	ldr	r2, [pc, #508]	@ (8002e04 <UART_SetConfig+0x2f0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d104      	bne.n	8002c16 <UART_SetConfig+0x102>
 8002c0c:	231f      	movs	r3, #31
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e003      	b.n	8002c1e <UART_SetConfig+0x10a>
 8002c16:	231f      	movs	r3, #31
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	2380      	movs	r3, #128	@ 0x80
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d000      	beq.n	8002c2c <UART_SetConfig+0x118>
 8002c2a:	e06f      	b.n	8002d0c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002c2c:	231f      	movs	r3, #31
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d01f      	beq.n	8002c76 <UART_SetConfig+0x162>
 8002c36:	dc22      	bgt.n	8002c7e <UART_SetConfig+0x16a>
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d017      	beq.n	8002c6c <UART_SetConfig+0x158>
 8002c3c:	dc1f      	bgt.n	8002c7e <UART_SetConfig+0x16a>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <UART_SetConfig+0x134>
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d005      	beq.n	8002c52 <UART_SetConfig+0x13e>
 8002c46:	e01a      	b.n	8002c7e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c48:	f7fe fdd2 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]
        break;
 8002c50:	e01c      	b.n	8002c8c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002c52:	4b6b      	ldr	r3, [pc, #428]	@ (8002e00 <UART_SetConfig+0x2ec>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2207      	movs	r2, #7
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	0019      	movs	r1, r3
 8002c60:	4869      	ldr	r0, [pc, #420]	@ (8002e08 <UART_SetConfig+0x2f4>)
 8002c62:	f7fd fa51 	bl	8000108 <__udivsi3>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]
        break;
 8002c6a:	e00f      	b.n	8002c8c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c6c:	f7fe fd52 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8002c70:	0003      	movs	r3, r0
 8002c72:	61bb      	str	r3, [r7, #24]
        break;
 8002c74:	e00a      	b.n	8002c8c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	61bb      	str	r3, [r7, #24]
        break;
 8002c7c:	e006      	b.n	8002c8c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c82:	231e      	movs	r3, #30
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
        break;
 8002c8a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d100      	bne.n	8002c94 <UART_SetConfig+0x180>
 8002c92:	e097      	b.n	8002dc4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c98:	4b5c      	ldr	r3, [pc, #368]	@ (8002e0c <UART_SetConfig+0x2f8>)
 8002c9a:	0052      	lsls	r2, r2, #1
 8002c9c:	5ad3      	ldrh	r3, [r2, r3]
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	69b8      	ldr	r0, [r7, #24]
 8002ca2:	f7fd fa31 	bl	8000108 <__udivsi3>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	005a      	lsls	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	18d2      	adds	r2, r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	0010      	movs	r0, r2
 8002cba:	f7fd fa25 	bl	8000108 <__udivsi3>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d91c      	bls.n	8002d02 <UART_SetConfig+0x1ee>
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	2380      	movs	r3, #128	@ 0x80
 8002ccc:	025b      	lsls	r3, r3, #9
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d217      	bcs.n	8002d02 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	200e      	movs	r0, #14
 8002cd8:	183b      	adds	r3, r7, r0
 8002cda:	210f      	movs	r1, #15
 8002cdc:	438a      	bics	r2, r1
 8002cde:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b299      	uxth	r1, r3
 8002cec:	183b      	adds	r3, r7, r0
 8002cee:	183a      	adds	r2, r7, r0
 8002cf0:	8812      	ldrh	r2, [r2, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	183a      	adds	r2, r7, r0
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	e060      	b.n	8002dc4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002d02:	231e      	movs	r3, #30
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e05b      	b.n	8002dc4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d0c:	231f      	movs	r3, #31
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d01f      	beq.n	8002d56 <UART_SetConfig+0x242>
 8002d16:	dc22      	bgt.n	8002d5e <UART_SetConfig+0x24a>
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d017      	beq.n	8002d4c <UART_SetConfig+0x238>
 8002d1c:	dc1f      	bgt.n	8002d5e <UART_SetConfig+0x24a>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <UART_SetConfig+0x214>
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d005      	beq.n	8002d32 <UART_SetConfig+0x21e>
 8002d26:	e01a      	b.n	8002d5e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7fe fd62 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	61bb      	str	r3, [r7, #24]
        break;
 8002d30:	e01c      	b.n	8002d6c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002d32:	4b33      	ldr	r3, [pc, #204]	@ (8002e00 <UART_SetConfig+0x2ec>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2207      	movs	r2, #7
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	0019      	movs	r1, r3
 8002d40:	4831      	ldr	r0, [pc, #196]	@ (8002e08 <UART_SetConfig+0x2f4>)
 8002d42:	f7fd f9e1 	bl	8000108 <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	61bb      	str	r3, [r7, #24]
        break;
 8002d4a:	e00f      	b.n	8002d6c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4c:	f7fe fce2 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8002d50:	0003      	movs	r3, r0
 8002d52:	61bb      	str	r3, [r7, #24]
        break;
 8002d54:	e00a      	b.n	8002d6c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	61bb      	str	r3, [r7, #24]
        break;
 8002d5c:	e006      	b.n	8002d6c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d62:	231e      	movs	r3, #30
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
        break;
 8002d6a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d028      	beq.n	8002dc4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d76:	4b25      	ldr	r3, [pc, #148]	@ (8002e0c <UART_SetConfig+0x2f8>)
 8002d78:	0052      	lsls	r2, r2, #1
 8002d7a:	5ad3      	ldrh	r3, [r2, r3]
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	69b8      	ldr	r0, [r7, #24]
 8002d80:	f7fd f9c2 	bl	8000108 <__udivsi3>
 8002d84:	0003      	movs	r3, r0
 8002d86:	001a      	movs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	18d2      	adds	r2, r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0019      	movs	r1, r3
 8002d96:	0010      	movs	r0, r2
 8002d98:	f7fd f9b6 	bl	8000108 <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	d90a      	bls.n	8002dbc <UART_SetConfig+0x2a8>
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d205      	bcs.n	8002dbc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	e003      	b.n	8002dc4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002dbc:	231e      	movs	r3, #30
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	226a      	movs	r2, #106	@ 0x6a
 8002dc8:	2101      	movs	r1, #1
 8002dca:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2268      	movs	r2, #104	@ 0x68
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002de0:	231e      	movs	r3, #30
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	781b      	ldrb	r3, [r3, #0]
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b008      	add	sp, #32
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	cfff69f3 	.word	0xcfff69f3
 8002df4:	ffffcfff 	.word	0xffffcfff
 8002df8:	11fff4ff 	.word	0x11fff4ff
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40004400 	.word	0x40004400
 8002e08:	02dc6c00 	.word	0x02dc6c00
 8002e0c:	08003348 	.word	0x08003348

08002e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	@ (8002f54 <UART_AdvFeatureConfig+0x144>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4013      	ands	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a43      	ldr	r2, [pc, #268]	@ (8002f58 <UART_AdvFeatureConfig+0x148>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	2202      	movs	r2, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f5c <UART_AdvFeatureConfig+0x14c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4a34      	ldr	r2, [pc, #208]	@ (8002f60 <UART_AdvFeatureConfig+0x150>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f64 <UART_AdvFeatureConfig+0x154>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4a25      	ldr	r2, [pc, #148]	@ (8002f68 <UART_AdvFeatureConfig+0x158>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	2240      	movs	r2, #64	@ 0x40
 8002eea:	4013      	ands	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <UART_AdvFeatureConfig+0x15c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	035b      	lsls	r3, r3, #13
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d10b      	bne.n	8002f2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <UART_AdvFeatureConfig+0x160>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	2280      	movs	r2, #128	@ 0x80
 8002f30:	4013      	ands	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f74 <UART_AdvFeatureConfig+0x164>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
  }
}
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	ffff7fff 	.word	0xffff7fff
 8002f58:	fffdffff 	.word	0xfffdffff
 8002f5c:	fffeffff 	.word	0xfffeffff
 8002f60:	fffbffff 	.word	0xfffbffff
 8002f64:	ffffefff 	.word	0xffffefff
 8002f68:	ffffdfff 	.word	0xffffdfff
 8002f6c:	ffefffff 	.word	0xffefffff
 8002f70:	ff9fffff 	.word	0xff9fffff
 8002f74:	fff7ffff 	.word	0xfff7ffff

08002f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b092      	sub	sp, #72	@ 0x48
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2290      	movs	r2, #144	@ 0x90
 8002f84:	2100      	movs	r1, #0
 8002f86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f88:	f7fd fe50 	bl	8000c2c <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2208      	movs	r2, #8
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d12d      	bne.n	8002ffa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa0:	2280      	movs	r2, #128	@ 0x80
 8002fa2:	0391      	lsls	r1, r2, #14
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4a47      	ldr	r2, [pc, #284]	@ (80030c4 <UART_CheckIdleState+0x14c>)
 8002fa8:	9200      	str	r2, [sp, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f000 f88e 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d022      	beq.n	8002ffa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	f383 8810 	msr	PRIMASK, r3
}
 8002fc8:	46c0      	nop			@ (mov r8, r8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2180      	movs	r1, #128	@ 0x80
 8002fd6:	438a      	bics	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2288      	movs	r2, #136	@ 0x88
 8002fea:	2120      	movs	r1, #32
 8002fec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2284      	movs	r2, #132	@ 0x84
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e060      	b.n	80030bc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2204      	movs	r2, #4
 8003002:	4013      	ands	r3, r2
 8003004:	2b04      	cmp	r3, #4
 8003006:	d146      	bne.n	8003096 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300a:	2280      	movs	r2, #128	@ 0x80
 800300c:	03d1      	lsls	r1, r2, #15
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4a2c      	ldr	r2, [pc, #176]	@ (80030c4 <UART_CheckIdleState+0x14c>)
 8003012:	9200      	str	r2, [sp, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	f000 f859 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d03b      	beq.n	8003096 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800301e:	f3ef 8310 	mrs	r3, PRIMASK
 8003022:	60fb      	str	r3, [r7, #12]
  return(result);
 8003024:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
 8003028:	2301      	movs	r3, #1
 800302a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f383 8810 	msr	PRIMASK, r3
}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4922      	ldr	r1, [pc, #136]	@ (80030c8 <UART_CheckIdleState+0x150>)
 8003040:	400a      	ands	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f383 8810 	msr	PRIMASK, r3
}
 800304e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003050:	f3ef 8310 	mrs	r3, PRIMASK
 8003054:	61bb      	str	r3, [r7, #24]
  return(result);
 8003056:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	633b      	str	r3, [r7, #48]	@ 0x30
 800305a:	2301      	movs	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	438a      	bics	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003078:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	228c      	movs	r2, #140	@ 0x8c
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2284      	movs	r2, #132	@ 0x84
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e012      	b.n	80030bc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2288      	movs	r2, #136	@ 0x88
 800309a:	2120      	movs	r1, #32
 800309c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	228c      	movs	r2, #140	@ 0x8c
 80030a2:	2120      	movs	r1, #32
 80030a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2284      	movs	r2, #132	@ 0x84
 80030b6:	2100      	movs	r1, #0
 80030b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b010      	add	sp, #64	@ 0x40
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	01ffffff 	.word	0x01ffffff
 80030c8:	fffffedf 	.word	0xfffffedf

080030cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030dc:	e051      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	3301      	adds	r3, #1
 80030e2:	d04e      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fd fda2 	bl	8000c2c <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e051      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2204      	movs	r2, #4
 8003106:	4013      	ands	r3, r2
 8003108:	d03b      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b80      	cmp	r3, #128	@ 0x80
 800310e:	d038      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d035      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2208      	movs	r2, #8
 800311e:	4013      	ands	r3, r2
 8003120:	2b08      	cmp	r3, #8
 8003122:	d111      	bne.n	8003148 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2208      	movs	r2, #8
 800312a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 f83c 	bl	80031ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2290      	movs	r2, #144	@ 0x90
 8003138:	2108      	movs	r1, #8
 800313a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2284      	movs	r2, #132	@ 0x84
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e02c      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	401a      	ands	r2, r3
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	429a      	cmp	r2, r3
 800315a:	d112      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	0018      	movs	r0, r3
 800316a:	f000 f81f 	bl	80031ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2290      	movs	r2, #144	@ 0x90
 8003172:	2120      	movs	r1, #32
 8003174:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2284      	movs	r2, #132	@ 0x84
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	425a      	negs	r2, r3
 8003192:	4153      	adcs	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	001a      	movs	r2, r3
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d09e      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b004      	add	sp, #16
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08e      	sub	sp, #56	@ 0x38
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031b4:	f3ef 8310 	mrs	r3, PRIMASK
 80031b8:	617b      	str	r3, [r7, #20]
  return(result);
 80031ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f383 8810 	msr	PRIMASK, r3
}
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4926      	ldr	r1, [pc, #152]	@ (8003270 <UART_EndRxTransfer+0xc4>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031e6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ea:	623b      	str	r3, [r7, #32]
  return(result);
 80031ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f0:	2301      	movs	r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	f383 8810 	msr	PRIMASK, r3
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	491b      	ldr	r1, [pc, #108]	@ (8003274 <UART_EndRxTransfer+0xc8>)
 8003208:	400a      	ands	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d118      	bne.n	8003252 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003220:	f3ef 8310 	mrs	r3, PRIMASK
 8003224:	60bb      	str	r3, [r7, #8]
  return(result);
 8003226:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322a:	2301      	movs	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2110      	movs	r1, #16
 8003242:	438a      	bics	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f383 8810 	msr	PRIMASK, r3
}
 8003250:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	228c      	movs	r2, #140	@ 0x8c
 8003256:	2120      	movs	r1, #32
 8003258:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b00e      	add	sp, #56	@ 0x38
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	fffffedf 	.word	0xfffffedf
 8003274:	effffffe 	.word	0xeffffffe

08003278 <memset>:
 8003278:	0003      	movs	r3, r0
 800327a:	1882      	adds	r2, r0, r2
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <memset+0xa>
 8003280:	4770      	bx	lr
 8003282:	7019      	strb	r1, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	e7f9      	b.n	800327c <memset+0x4>

08003288 <__libc_init_array>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	2600      	movs	r6, #0
 800328c:	4c0c      	ldr	r4, [pc, #48]	@ (80032c0 <__libc_init_array+0x38>)
 800328e:	4d0d      	ldr	r5, [pc, #52]	@ (80032c4 <__libc_init_array+0x3c>)
 8003290:	1b64      	subs	r4, r4, r5
 8003292:	10a4      	asrs	r4, r4, #2
 8003294:	42a6      	cmp	r6, r4
 8003296:	d109      	bne.n	80032ac <__libc_init_array+0x24>
 8003298:	2600      	movs	r6, #0
 800329a:	f000 f819 	bl	80032d0 <_init>
 800329e:	4c0a      	ldr	r4, [pc, #40]	@ (80032c8 <__libc_init_array+0x40>)
 80032a0:	4d0a      	ldr	r5, [pc, #40]	@ (80032cc <__libc_init_array+0x44>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	42a6      	cmp	r6, r4
 80032a8:	d105      	bne.n	80032b6 <__libc_init_array+0x2e>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	00b3      	lsls	r3, r6, #2
 80032ae:	58eb      	ldr	r3, [r5, r3]
 80032b0:	4798      	blx	r3
 80032b2:	3601      	adds	r6, #1
 80032b4:	e7ee      	b.n	8003294 <__libc_init_array+0xc>
 80032b6:	00b3      	lsls	r3, r6, #2
 80032b8:	58eb      	ldr	r3, [r5, r3]
 80032ba:	4798      	blx	r3
 80032bc:	3601      	adds	r6, #1
 80032be:	e7f2      	b.n	80032a6 <__libc_init_array+0x1e>
 80032c0:	08003360 	.word	0x08003360
 80032c4:	08003360 	.word	0x08003360
 80032c8:	08003364 	.word	0x08003364
 80032cc:	08003360 	.word	0x08003360

080032d0 <_init>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr

080032dc <_fini>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr
